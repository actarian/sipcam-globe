{"version":3,"sources":["node_modules/gsap/dist/EasePack.js","node_modules/gsap/dist/gsap.js","node_modules/three/build/three.js"],"names":["global","factory","exports","module","define","amd","self","window","this","gsap","_registerEase","_getGSAP","registerPlugin","_boolean","value","defaultValue","indexOf","_initCore","core","registerEase","p","eases","parseEase","createConfig","ease","ratio","y","config","SlowMo","ExpoScaleEase","RoughEase","EasePack","globals","_createSlowMo","linearRatio","power","yoyoMode","pow","Math","min","p1","p3","calcEnd","r","_createExpoScale","start","end","log","p2","exp","EasePoint","time","next","t","v","prev","c","gap","_createRoughEase","vars","points","x","bump","invX","obj","pnt","recent","taper","a","cnt","i","randomize","clamp","template","strength","random","sort","b","register","version","default","Object","defineProperty","_inheritsLoose","subClass","superClass","prototype","create","constructor","__proto__","_assertThisInitialized","ReferenceError","_suppressOverwrites","_globalTimeline","_win","_coreInitted","_doc","_coreReady","_lastRenderedFrame","_quickTween","_tickerActive","_id","_req","_raf","_self","_delta","_i","_getTime","_lagThreshold","_adjustedLag","_startTime","_lastUpdate","_gap","_nextTime","_listeners","_tick","n","n1","easeOut","_config","autoSleep","force3D","nullTargetWarn","units","lineHeight","_defaults","duration","overwrite","delay","_bigNum","_tinyNum","_2PI","PI","_HALF_PI","_gsID","_sqrt","sqrt","_cos","cos","_sin","sin","_isString","_isFunction","_isNumber","_isUndefined","_isObject","_isNotFalse","_windowExists","_isFuncOrString","_isTypedArray","ArrayBuffer","isView","_isArray","Array","isArray","_strictNumExp","_numExp","_numWithUnitExp","_complexStringNumExp","_relExp","_delimitedValueExp","_unitExp","_globals","_installScope","_install","scope","_merge","_missingPlugin","property","console","warn","_warn","message","suppress","_addGlobal","name","_emptyFunc","_reservedProps","_lazyTweens","_lazyLookup","_plugins","_effects","_nextGCFrame","_harnessPlugins","_callbackNames","_harness","targets","harnessPlugin","target","_gsap","harness","length","targetTest","GSCache","splice","_getCache","toArray","_getProperty","getAttribute","_forEachName","names","func","split","forEach","_round","round","_arrayContainsAny","toSearch","toFind","l","_lazyRender","tween","slice","_lazy","render","_lazySafeRender","animation","suppressEvents","force","_numericIfPossible","parseFloat","match","trim","_passThrough","_setDefaults","defaults","_setKeyframeDefaults","base","toMerge","_mergeDeep","_copyExcluding","excluding","copy","_inheritDefaults","parent","keyframes","inherit","_dp","_removeLinkedListItem","child","firstProp","lastProp","_prev","_next","_removeFromParent","onlyIfParentHasAutoRemove","autoRemoveChildren","remove","_act","_uncache","_end","_dur","_start","_dirty","_recacheAncestors","totalDuration","_hasNoPausedAncestors","_ts","_elapsedCycleDuration","_repeat","_animationCycle","_tTime","_rDelay","tTime","cycleDuration","whole","floor","_parentToChildTotalTime","parentTime","_tDur","_setEnd","abs","_rts","_alignPlayhead","totalTime","smoothChildTiming","_time","_postAddChecks","timeline","_initted","rawTime","_clamp","_zTime","_addToTimeline","position","skipChecks","_parsePosition","_delay","timeScale","sortBy","_addLinkedListItem","_sort","_isFromOrFromStart","_recent","_scrollTrigger","trigger","ScrollTrigger","_attemptInitTween","_initTween","_pt","lazy","_ticker","frame","push","_parentPlayheadIsBeforeStart","_ref","_lock","_ref2","data","_setDuration","skipUncache","leavePlayhead","repeat","dur","totalProgress","_onUpdateTotalDuration","Timeline","_zeroPosition","endTime","percentAnimation","offset","isPercent","labels","clippedDuration","isNaN","charAt","substr","replace","_createTweenType","type","params","irVars","isLegacy","varsIndex","immediateRender","runBackwards","startAt","Tween","_conditionalReturn","max","getUnit","exec","index","_slice","_isArrayLike","nonEmpty","nodeType","_flatten","ar","leaveStrings","accumulator","_accumulator","apply","_wake","call","querySelectorAll","shuffle","distribute","each","_parseEase","from","cache","isDecimal","ratios","axis","ratioX","ratioY","center","edges","originX","originY","d","j","wrapAt","distances","grid","getBoundingClientRect","left","amount","u","_invertEase","_roundModifier","raw","snap","snapTo","radius","is2D","values","increment","dx","dy","closest","roundingIncrement","returnFunction","_wrapArray","wrapper","_replaceRandom","nums","s","mapRange","inMin","inMax","outMin","outMax","inRange","outRange","_getLabelInDirection","fromTime","backward","distance","label","_callback","executeLazyFirst","callback","callbackScope","_interrupt","scrollTrigger","kill","progress","_createPlugin","isFunc","Plugin","init","_props","instanceDefaults","_renderPropTweens","add","_addPropTween","_killPropTweensOf","modifier","_addPluginModifier","rawVars","statics","get","getSetter","_getSetter","aliases","prop","toUpperCase","PropTween","_255","_colorLookup","aqua","lime","silver","black","maroon","teal","blue","navy","white","olive","yellow","orange","gray","purple","green","red","pink","cyan","transparent","_hue","h","m1","m2","splitColor","toHSL","forceAlpha","g","wasHSL","parseInt","map","Number","_colorOrderData","_colorExp","_formatColors","orderMatchData","shell","result","colors","color","join","shift","RegExp","_hslExp","_colorStringFilter","combined","lastIndex","test","Date","now","overlap","dispatch","elapsed","manual","tick","deltaRatio","fps","wake","document","gsapVersions","GreenSockGlobals","requestAnimationFrame","sleep","f","setTimeout","cancelAnimationFrame","clearTimeout","lagSmoothing","threshold","adjustedLag","_fps","_easeMap","_customEaseExp","_quotesExp","_parseObjectInString","val","parsedVal","key","lastIndexOf","_propagateYoyoEase","isYoyo","_first","yoyoEase","_yoyo","_ease","_yEase","defaultEase","open","close","nested","substring","_CE","_configEaseFromString","_insertEase","easeIn","easeInOut","lowercaseName","toLowerCase","_easeInOutFromOut","_configElastic","amplitude","period","asin","_configBack","overshoot","Linear","easeNone","none","SteppedEase","steps","immediateStart","id","set","Animation","Infinity","repeatDelay","yoyo","_proto","startTime","arguments","_totalTime","_ptLookup","_pTime","iteration","_ps","paused","includeRepeats","wrapRepeats","globalTime","seek","restart","includeDelay","play","reversed","reverse","pause","atTime","resume","invalidate","isActive","eventCallback","_onUpdate","then","onFulfilled","Promise","resolve","_resolve","_then","_prom","_Animation","_this","sortChildren","_proto2","to","fromTo","fromVars","toVars","delayedCall","staggerTo","stagger","onCompleteAll","onCompleteAllParams","onComplete","onCompleteParams","staggerFrom","staggerFromTo","prevPaused","pauseTween","prevStart","prevIteration","prevTime","tDur","crossingStart","rewinding","doesWrap","repeatRefresh","onRepeat","_hasPause","_forcing","_last","_findNextPauseTween","onUpdate","adjustedTime","_this2","addLabel","getChildren","tweens","timelines","ignoreBeforeTime","getById","animations","removeLabel","killTweensOf","_totalTime2","addPause","removePause","props","onlyActive","getTweensOf","_overwritingTween","children","parsedTargets","isGlobalTime","_targets","tweenTo","initted","tl","_vars","_onStart","onStart","onStartParams","tweenFromTo","fromPosition","toPosition","nextLabel","afterTime","previousLabel","beforeTime","currentLabel","shiftChildren","adjustLabels","clear","includeLabels","updateRoot","_addComplexStringPropTween","setter","stringFilter","funcParam","startNums","endNum","chunk","startNum","hasRandom","pt","_renderComplexString","matchIndex","e","m","fp","currentValue","parsedStart","_setterFuncWithParam","_setterFunc","_setterPlain","_renderBoolean","_renderPlain","_checkPlugin","plugin","ptLookup","_parseFuncOrString","style","_processVars","priority","cleanVars","hasPriority","gsData","harnessVars","overwritten","onUpdateParams","autoRevert","prevStartAt","_startAt","fullTargets","autoOverwrite","_overwrite","_from","_op","_sortPropTweensByPriority","_onInit","_staggerTweenProps","_staggerPropsToSkip","_Animation2","skipInherit","_this3","curTarget","staggerFunc","staggerVarsToMerge","_this3$vars","_proto3","prevRatio","_renderZeroDurationTween","overwrittenProps","curLookup","curOverwriteProps","killingTargets","propTweenLookup","firstPT","a1","a2","_arraysMatch","propertyAliases","_addAliasesToVars","onReverseComplete","onReverseCompleteParams","_setterAttribute","setAttribute","hasNonDependentRemaining","op","dep","_setterWithModifier","mSet","mt","pt2","first","last","pr","change","renderer","TweenMax","TweenLite","TimelineLite","TimelineMax","_len2","args","_key2","getProperty","unit","uncache","getter","format","quickSetter","setters","isTweening","registerEffect","_ref3","effect","plugins","extendTimeline","pluginName","exportRoot","includeDelayedCalls","utils","wrap","range","wrapYoyo","total","normalize","selector","el","current","nativeElement","createElement","pipe","_len","functions","_key","reduce","unitize","interpolate","mutate","interpolators","il","isString","master","install","effects","ticker","globalTimeline","getCache","suppressOverwrites","_getPluginPropTween","_buildModifierPlugin","temp","modifiers","_addModifiers","_win$1","_doc$1","_docElement","_pluginInitted","_tempDiv","_recentSetterPlugin","_supports3D","Power0","Power1","Power2","Power3","Power4","Quad","Cubic","Quart","Quint","Strong","Elastic","Back","Bounce","Sine","Expo","Circ","_transformProps","_RAD2DEG","_DEG2RAD","_atan2","atan2","_capsExp","_horizontalExp","_complexExp","_propertyAliases","autoAlpha","scale","alpha","_renderCSSProp","_renderPropWithEnd","_renderCSSPropWithBeginning","_renderRoundedCSSProp","_renderNonTweeningValue","_renderNonTweeningValueOnlyAtEnd","_setterCSSStyle","_setterCSSProp","setProperty","_setterTransform","_setterScale","scaleX","scaleY","_setterScaleWithRender","renderTransform","_setterTransformWithRender","_transformProp","_transformOriginProp","_createElement","ns","createElementNS","_getComputedProperty","skipPrefixFallback","cs","getComputedStyle","getPropertyValue","_checkPropPrefix","_prefixes","element","preferPrefix","documentElement","cssText","_getBBoxHack","swapIfPossible","bbox","svg","ownerSVGElement","oldParent","parentNode","oldSibling","nextSibling","oldCSS","appendChild","display","getBBox","_gsapBBox","insertBefore","removeChild","_getAttributeFallbacks","attributesArray","hasAttribute","_getBBox","bounds","error","width","height","_isSVG","getCTM","_removeProperty","removeProperty","removeAttribute","_addNonTweeningPT","beginning","onlySetAtEnd","_nonConvertibleUnits","deg","rad","turn","_convertToUnit","px","isSVG","curValue","curUnit","horizontal","isRootSVG","tagName","measureProperty","toPixels","toPercent","body","_get","_parseTransform","origin","_firstTwoOnly","zOrigin","_specialProps","_tweenComplexCSSString","startValues","startValue","endValue","endUnit","startUnit","relative","_keywordToPercent","top","bottom","right","_renderClearProps","clearTransforms","clearProps","_identity2DMatrix","_rotationalProperties","_isNullTransform","_getComputedTransformMatrixAsArray","matrixString","_getMatrix","force2D","addedToDOM","matrix","transform","baseVal","consolidate","offsetParent","_applySVGOrigin","originIsAbsolute","smooth","matrixArray","pluginToAddPropTweensTo","determinant","xOriginOld","xOrigin","yOriginOld","yOrigin","xOffsetOld","xOffset","yOffsetOld","yOffset","tx","ty","originSplit","z","rotation","rotationX","rotationY","skewX","skewY","perspective","angle","a12","a22","t1","t2","t3","a13","a23","a33","a42","a43","a32","invertedScaleX","forceCSS","xPercent","offsetWidth","yPercent","offsetHeight","transformPerspective","_renderSVGTransforms","_renderCSSTransforms","_renderNon3DTransforms","_addPxTranslate","_zeroDeg","_zeroPx","_endParenthesis","transforms","use3D","a11","a21","tan","_addRotationalPropTween","direction","cap","finalValue","_assign","source","_addRawTransformPTs","endCache","startCache","side","positionAndScale","all","CSSPlugin","specialProp","isTransformRelated","transformPropTween","parseTransform","smoothOrigin","autoRound","checkPrefix","gsapWithCSS","TweenMaxWithCSS","globalThis","THREE","REVISION","AddEquation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","UnsignedShortType","UnsignedIntType","FloatType","HalfFloatType","UnsignedInt248Type","RGBFormat","RGBAFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","KeepStencilOp","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","addEventListener","listener","undefined","listeners","hasEventListener","removeEventListener","listenerArray","dispatchEvent","event","array","_lut","toString","_seed","DEG2RAD","RAD2DEG","generateUUID","d0","d1","d2","d3","euclideanModulo","lerp","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","MathUtils","freeze","mapLinear","b1","b2","inverseLerp","damp","lambda","dt","pingpong","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","seededRandom","degToRad","degrees","radToDeg","radians","setQuaternionFromProperEuler","q","order","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","Vector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","manhattanLength","distanceTo","distanceToSquared","manhattanDistanceTo","setLength","lerpVectors","v1","v2","equals","fromArray","fromBufferAttribute","attribute","getX","getY","rotateAround","isVector2","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a31","b11","b12","b13","b21","b22","b23","b31","b32","b33","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","sx","sy","cx","cy","rotate","theta","translate","_canvas","isMatrix3","ImageUtils","getDataURL","image","src","HTMLCanvasElement","canvas","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","anisotropy","encoding","super","uuid","mipmaps","internalFormat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","isRenderTargetTexture","updateMatrix","toJSON","meta","isRootObject","textures","output","metadata","generator","images","url","isDataTexture","serializeImage","dispose","transformUv","uv","needsUpdate","HTMLImageElement","ImageBitmap","isTexture","Vector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","setSize","isWebGLRenderTarget","WebGLMultipleRenderTargets","count","isWebGLMultipleRenderTargets","WebGLMultisampleRenderTarget","samples","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","update","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","isQuaternion","Vector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$b","setFromObject","object","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box$3","union","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","isBox3","_testAxis","v0","extents","p0","_box$2","_v1$6","_toFarthestPoint","_toPoint","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","sign","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","_v1$5","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","near","far","makeOrthographic","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","Layers","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","isObject3D","removeFromParent","attach","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","instanceColor","isScene","background","isColor","environment","isMesh","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","extractFromCache","recursive","parse","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","setFromCoplanarPoints","d4","vc","d5","d6","vb","va","materialId","Material","fog","blending","vertexColors","opacity","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","toneMapped","_alphaTest","alphaTest","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","isRoot","getHex","roughness","metalness","sheenTint","emissive","emissiveIntensity","specular","specularIntensity","specularTint","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularTintMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationTint","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","srcPlanes","dstPlanes","isMaterial","_colorKeywords","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","limegreen","linen","magenta","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","oldlace","olivedrab","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","plum","powderblue","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","setHSL","handleAlpha","string","components","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","delta","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2$1","BufferAttribute","itemSize","TypeError","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isBufferAttribute","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","arrayMax","TYPED_ARRAYS","getTypedArray","buffer","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","getIndex","setIndex","deleteAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","morphAttribute","jl","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","isFinite","group","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","merge","isBufferGeometry","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","isInterleavedBufferAttribute","stride","geometry2","newAttribute","morphArray","keys","hasMorphAttributes","attributeArray","_inverseMatrix$2","_ray$2","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","assign","ml","String","morphTargets","raycaster","intersects","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","checkIntersection","BoxGeometry","widthSegments","heightSegments","depthSegments","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","fromJSON","cloneUniforms","mergeUniforms","uniforms","merged","UniformsUtils","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","isShaderMaterial","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","isPerspectiveCamera","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","isCubeTexture","WebGLCubeRenderTarget","dummy","isInteger","_needsFlipEnvMap","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","isPlane","_sphere$2","_vector$7","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","output_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshnormal_frag","meshnormal_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","meshtoon_frag","meshtoon_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","ior","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","state","objects","clearColor","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","vertexAttribIPointer","reset","resetDefaultState","setup","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","ELEMENT_ARRAY_BUFFER","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","location","isInstancedInterleavedBuffer","locationSize","_maxInstanceCount","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","has","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","physical","transmissionSamplerSize","transmissionSamplerMap","OrthographicCamera","scaleW","scaleH","isOrthographicCamera","RawShaderMaterial","isRawShaderMaterial","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","LOD_MAX","ENCODINGS","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_renderer","_pingPongRenderTarget","_blurMaterial","weights","poleAxis","latitudinal","dTheta","mipInt","inputEncoding","outputEncoding","_getCommonVertexShader","_getEncodings","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","compile","cubeCamera","upSign","forwardSign","originalAutoClear","backgroundMaterial","backgroundBox","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","sum","weight","outputSize","lod","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","WebGLCubeUVMaps","cubeUVmaps","pmremGenerator","cubemapUV","isEquirectMap","isCubeMap","isCubeTextureComplete","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphNormals","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","DataTexture2DArray","wrapR","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueV1i","uniform1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2uiv","setValueV3ui","uniform3uiv","setValueV4ui","uniform4uiv","setValueT1","safeSetTexture2D","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueT2DArray1","setTexture2DArray","setValueV1fArray","uniform1fv","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","matchEnd","idIsIndex","subscript","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","COMPILE_STATUS","errors","getShaderInfoLog","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","specularTintMapEncoding","lightMapEncoding","depthPacking","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","fragmentErrors","getError","VALIDATE_STATUS","diagnostics","prefix","cachedUniforms","deleteShader","ACTIVE_ATTRIBUTES","getActiveAttrib","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","cubeuvmaps","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","bones","nVertexUniforms","nVertexMatrices","getMaxBones","useAlphaTest","useClearcoat","isFogExp2","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","renderCallDepth","list","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","ShadowUniformsCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","scaleFactor","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","WebGLShadowMap","_objects","_capabilities","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterial","_distanceMaterial","_materialCache","_maxTextureSize","shadowMaterialVertical","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","blurSamples","mapPass","renderBufferDirect","getDepthMaterial","customMaterial","customDistanceMaterial","customDepthMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","k","kl","depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","activeTexture","webglSlot","TEXTURE0","bindFramebuffer","framebuffer","DRAW_FRAMEBUFFER","FRAMEBUFFER","bindXRFramebuffer","useProgram","setMaterial","frontFaceCW","SAMPLE_ALPHA_TO_COVERAGE","setLineWidth","lineWidth","SCISSOR_TEST","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","texImage3D","KEEP","READ_FRAMEBUFFER","WebGLTextures","_gl","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","isPowerOfTwo$1","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","log2","getInternalFormat","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","filterFallback","LINEAR","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","setupFrameBufferTexture","attachment","textureTarget","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","glTextureType","updateRenderTargetMipmap","updateMultisampleRenderTarget","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","WebGLUtils","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","isArrayCamera","Group","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","disconnect","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","handedness","gripSpace","WebXRManager","framebufferScaleFactor","referenceSpaceType","pose","glBinding","glFramebuffer","glProjLayer","glBaseLayer","glMultisampledFramebuffer","glColorRenderbuffer","glDepthRenderbuffer","xrFrame","depthStyle","clearStyle","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","onSessionEnd","isPresenting","onInputSourcesChange","inputSources","removed","added","cameraAutoUpdate","getController","getControllerGrip","getHand","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getBaseLayer","getBinding","getFrame","setSession","async","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","antialias","XRWebGLLayer","updateRenderState","baseLayer","WebGLRenderingContext","depthFormat","projectionlayerInit","colorFormat","XRWebGLBinding","createProjectionLayer","textureWidth","textureHeight","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","getCamera","getFoveation","fixedFoveation","setFoveation","foveation","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","glSubImage","getViewSubImage","depthStencilTexture","colorTexture","invalidateFramebuffer","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","createCanvasElement","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","rangeMin","rangeMax","initGLContext","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","releaseMaterialProgramReferences","deallocateMaterial","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","getProgram","projectObject","isLOD","isImmediateRenderObject","renderScene","opaqueObjects","transmissiveObjects","transparentObjects","needsAntialias","currentToneMapping","renderObjects","renderTransmissionPass","renderObjectImmediate","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","boneTexture","computeBoneTexture","boneTextureSize","camera2","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","compressedTexSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","FogExp2","Fog","Scene","InterleavedBuffer","arrayBuffers","_uuid","ib","isInterleavedBuffer","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","SkinnedMesh","bindMatrixInverse","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","boneIndex","boneInverses","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","Skeleton","boneMatrices","inverse","bone","getBoneByName","json","boneInverse","InstancedBufferAttribute","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","Line","computeLineDistances","lineDistances","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","details","DodecahedronGeometry","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Curve","arcLengthDivisions","getPoint","getPointAt","optionalTarget","getUtoTmapping","getPoints","divisions","getSpacedPoints","getLength","lengths","getLengths","cacheArcLengths","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","getTangent","pt1","getTangentAt","computeFrenetFrames","closed","binormals","vec","mat","MAX_VALUE","tz","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","isEllipseCurve","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","py","pz","CatmullRomCurve3","curveType","intPoint","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","CubicBezierCurve","v3","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","Earcut","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","invSize","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","placeholder","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","extrudePts","splineTube","binormal","position2","extrudeByPath","shapePoints","extractPoints","hl","ahole","concat","scalePt2","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","bs","vert","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","toJSON$1","geometryShapes","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","OctahedronGeometry","ParametricGeometry","slices","stacks","EPS","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","thetaEnd","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","TubeGeometry","frames","P","generateSegment","generateIndices","generateBufferData","WireframeGeometry","Set","o","ol","isUniqueEdge","hash1","hash2","Geometries","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","STANDARD","PHYSICAL","_clearcoat","_transmission","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","getSettings_","copySampleValue_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","nKeys","validate","valid","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","urlModifier","isLoading","itemsLoaded","itemsTotal","handlers","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","reject","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","dataUriRegexResult","request","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","XMLHttpRequest","callbacks","overrideMimeType","header","send","setResponseType","setMimeType","ImageLoader","onImageLoad","onImageError","CubeTextureLoader","urls","loaded","loadTexture","DataTextureLoader","texData","mipmapCount","TextureLoader","isJPEG","search","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","Path","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Shape","getPointsHoles","holesPts","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","isSpotLightShadow","SpotLight","_lightPositionWorld","_lookTarget","PointLightShadow","_cubeDirections","_cubeUps","PointLight","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isSphericalHarmonics3","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","InstancedBufferGeometry","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","arrayBuffer","getArrayBuffer","typedArray","bufferAttribute","drawcalls","offsets","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","ImageBitmapLoader","createImageBitmap","fetch","setOptions","fetchOptions","credentials","headers","res","blob","colorSpaceConversion","imageBitmap","catch","isImageBitmapLoader","ShapePath","subPaths","currentPath","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","newShapes","tmpPoints","tmpHoles","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","createPaths","glyph","glyphs","familyName","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","sky","ground","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","Audio","gain","createGain","connect","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","currentTime","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","setTargetAtTime","getDetune","getFilter","setFilter","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","root","isAnimationObjectGroup","Composite","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","targetObject","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","targetGroup","optionalParsedPath","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_effectiveTimeScale","_effectiveWeight","repetitions","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","setType","setItemSize","setCount","ascSort","intersectObject","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$3","_vector$2","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","isSkeletonHelper","boneList","_vector$1","_color1","_color2","GridHelper","_v1","_v2","_v3","_vector","_camera","setPoint","pointMap","_box","BoxHelper","_axis","_lineGeometry","_coneGeometry","AxesHelper","setColors","xAxisColor","yAxisColor","zAxisColor","_floatView","_int32View","construct","fromPoints","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","__THREE__","ACESFilmicToneMapping","AddOperation","AdditiveBlending","AlphaFormat","AlwaysDepth","AlwaysStencilFunc","AnimationLoader","ArrowHelper","headLength","headWidth","cone","setDirection","setColor","AudioListener","destination","timeDelta","_clock","removeFilter","getMasterVolume","setMasterVolume","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","AxisHelper","BackSide","BasicDepthPacking","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","Box3Helper","ByteType","CameraHelper","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","CanvasRenderer","CineonToneMapping","CompressedTextureLoader","texDatas","isCubemap","CullFaceBack","CullFaceFront","CullFaceFrontBack","CullFaceNone","CustomBlending","CustomToneMapping","Cylindrical","other","setFromCartesianCoords","DataUtils","toHalfFloat","DecrementStencilOp","DecrementWrapStencilOp","DirectionalLightHelper","lightPlane","targetLine","DoubleSide","DstAlphaFactor","DstColorFactor","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualDepth","EqualStencilFunc","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FontLoader","FrontSide","GLSL1","GreaterDepth","GreaterEqualDepth","GreaterEqualStencilFunc","GreaterStencilFunc","HemisphereLightHelper","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","IntType","InvertStencilOp","JSONLoader","LensFlare","LessDepth","LessEqualDepth","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LinearToneMapping","LogLuvEncoding","LoopOnce","LoopPingPong","LoopRepeat","LuminanceAlphaFormat","LuminanceFormat","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MaxEquation","MeshFaceMaterial","MinEquation","MixOperation","MultiMaterial","isMultiMaterial","MultiplyBlending","MultiplyOperation","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverDepth","NeverStencilFunc","NoBlending","NoColors","NoToneMapping","NormalBlending","NotEqualDepth","NotEqualStencilFunc","ObjectLoader","parseAsync","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","parseImagesAsync","bufferGeometryLoader","deserializeImage","loadImage","deserializedImage","currentUrl","parseConstant","getGeometry","getMaterial","objectAnimations","setTexturePath","ObjectSpaceNormalMap","OneFactor","OneMinusDstAlphaFactor","OneMinusDstColorFactor","OneMinusSrcAlphaFactor","OneMinusSrcColorFactor","PCFShadowMap","PCFSoftShadowMap","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PlaneHelper","PointCloud","PointCloudMaterial","PointLightHelper","sphereSize","PolarGridHelper","radials","circles","PositionalAudio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","RGBADepthPacking","RGBAIntegerFormat","RGBA_ASTC_10x10_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_BPTC_Format","RGBEFormat","RGBIntegerFormat","RGB_ETC1_Format","RGFormat","RGIntegerFormat","Raycaster","setFromCamera","coords","intersectObjects","RedFormat","RedIntegerFormat","ReinhardToneMapping","ReplaceStencilOp","ReverseSubtractEquation","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","ShortType","SmoothShading","Spherical","makeSafe","SpotLightHelper","coneLength","coneWidth","SrcAlphaFactor","SrcAlphaSaturateFactor","SrcColorFactor","StaticCopyUsage","StaticReadUsage","StereoCamera","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","SubtractEquation","SubtractiveBlending","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TangentSpaceNormalMap","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","VSMShadowMap","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","XHRLoader","ZeroFactor","ZeroStencilOp"],"mappings":"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","file":"docs\\js\\vendors.min.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\t/*!\n\t * EasePack 3.7.1\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2021, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\tvar gsap,\n\t    _registerEase,\n\t    _getGSAP = function _getGSAP() {\n\t  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n\t},\n\t    _boolean = function _boolean(value, defaultValue) {\n\t  return !!(typeof value === \"undefined\" ? defaultValue : value && !~(value + \"\").indexOf(\"false\"));\n\t},\n\t    _initCore = function _initCore(core) {\n\t  gsap = core || _getGSAP();\n\n\t  if (gsap) {\n\t    _registerEase = gsap.registerEase;\n\n\t    var eases = gsap.parseEase(),\n\t        createConfig = function createConfig(ease) {\n\t      return function (ratio) {\n\t        var y = 0.5 + ratio / 2;\n\n\t        ease.config = function (p) {\n\t          return ease(2 * (1 - p) * p * y + p * p);\n\t        };\n\t      };\n\t    },\n\t        p;\n\n\t    for (p in eases) {\n\t      if (!eases[p].config) {\n\t        createConfig(eases[p]);\n\t      }\n\t    }\n\n\t    _registerEase(\"slow\", SlowMo);\n\n\t    _registerEase(\"expoScale\", ExpoScaleEase);\n\n\t    _registerEase(\"rough\", RoughEase);\n\n\t    for (p in EasePack) {\n\t      p !== \"version\" && gsap.core.globals(p, EasePack[p]);\n\t    }\n\t  }\n\t},\n\t    _createSlowMo = function _createSlowMo(linearRatio, power, yoyoMode) {\n\t  linearRatio = Math.min(1, linearRatio || 0.7);\n\n\t  var pow = linearRatio < 1 ? power || power === 0 ? power : 0.7 : 0,\n\t      p1 = (1 - linearRatio) / 2,\n\t      p3 = p1 + linearRatio,\n\t      calcEnd = _boolean(yoyoMode);\n\n\t  return function (p) {\n\t    var r = p + (0.5 - p) * pow;\n\t    return p < p1 ? calcEnd ? 1 - (p = 1 - p / p1) * p : r - (p = 1 - p / p1) * p * p * p * r : p > p3 ? calcEnd ? p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p : r + (p - r) * (p = (p - p3) / p1) * p * p * p : calcEnd ? 1 : r;\n\t  };\n\t},\n\t    _createExpoScale = function _createExpoScale(start, end, ease) {\n\t  var p1 = Math.log(end / start),\n\t      p2 = end - start;\n\t  ease && (ease = gsap.parseEase(ease));\n\t  return function (p) {\n\t    return (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;\n\t  };\n\t},\n\t    EasePoint = function EasePoint(time, value, next) {\n\t  this.t = time;\n\t  this.v = value;\n\n\t  if (next) {\n\t    this.next = next;\n\t    next.prev = this;\n\t    this.c = next.v - value;\n\t    this.gap = next.t - time;\n\t  }\n\t},\n\t    _createRoughEase = function _createRoughEase(vars) {\n\t  if (typeof vars !== \"object\") {\n\t    vars = {\n\t      points: +vars || 20\n\t    };\n\t  }\n\n\t  var taper = vars.taper || \"none\",\n\t      a = [],\n\t      cnt = 0,\n\t      points = (+vars.points || 20) | 0,\n\t      i = points,\n\t      randomize = _boolean(vars.randomize, true),\n\t      clamp = _boolean(vars.clamp),\n\t      template = gsap ? gsap.parseEase(vars.template) : 0,\n\t      strength = (+vars.strength || 1) * 0.4,\n\t      x,\n\t      y,\n\t      bump,\n\t      invX,\n\t      obj,\n\t      pnt,\n\t      recent;\n\n\t  while (--i > -1) {\n\t    x = randomize ? Math.random() : 1 / points * i;\n\t    y = template ? template(x) : x;\n\n\t    if (taper === \"none\") {\n\t      bump = strength;\n\t    } else if (taper === \"out\") {\n\t      invX = 1 - x;\n\t      bump = invX * invX * strength;\n\t    } else if (taper === \"in\") {\n\t      bump = x * x * strength;\n\t    } else if (x < 0.5) {\n\t      invX = x * 2;\n\t      bump = invX * invX * 0.5 * strength;\n\t    } else {\n\t      invX = (1 - x) * 2;\n\t      bump = invX * invX * 0.5 * strength;\n\t    }\n\n\t    if (randomize) {\n\t      y += Math.random() * bump - bump * 0.5;\n\t    } else if (i % 2) {\n\t      y += bump * 0.5;\n\t    } else {\n\t      y -= bump * 0.5;\n\t    }\n\n\t    if (clamp) {\n\t      if (y > 1) {\n\t        y = 1;\n\t      } else if (y < 0) {\n\t        y = 0;\n\t      }\n\t    }\n\n\t    a[cnt++] = {\n\t      x: x,\n\t      y: y\n\t    };\n\t  }\n\n\t  a.sort(function (a, b) {\n\t    return a.x - b.x;\n\t  });\n\t  pnt = new EasePoint(1, 1, null);\n\t  i = points;\n\n\t  while (i--) {\n\t    obj = a[i];\n\t    pnt = new EasePoint(obj.x, obj.y, pnt);\n\t  }\n\n\t  recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);\n\t  return function (p) {\n\t    var pnt = recent;\n\n\t    if (p > pnt.t) {\n\t      while (pnt.next && p >= pnt.t) {\n\t        pnt = pnt.next;\n\t      }\n\n\t      pnt = pnt.prev;\n\t    } else {\n\t      while (pnt.prev && p <= pnt.t) {\n\t        pnt = pnt.prev;\n\t      }\n\t    }\n\n\t    recent = pnt;\n\t    return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;\n\t  };\n\t};\n\n\tvar SlowMo = _createSlowMo(0.7);\n\tSlowMo.ease = SlowMo;\n\tSlowMo.config = _createSlowMo;\n\tvar ExpoScaleEase = _createExpoScale(1, 2);\n\tExpoScaleEase.config = _createExpoScale;\n\tvar RoughEase = _createRoughEase();\n\tRoughEase.ease = RoughEase;\n\tRoughEase.config = _createRoughEase;\n\tvar EasePack = {\n\t  SlowMo: SlowMo,\n\t  RoughEase: RoughEase,\n\t  ExpoScaleEase: ExpoScaleEase\n\t};\n\n\tfor (var p in EasePack) {\n\t  EasePack[p].register = _initCore;\n\t  EasePack[p].version = \"3.7.1\";\n\t}\n\n\t_getGSAP() && gsap.registerPlugin(SlowMo);\n\n\texports.EasePack = EasePack;\n\texports.ExpoScaleEase = ExpoScaleEase;\n\texports.RoughEase = RoughEase;\n\texports.SlowMo = SlowMo;\n\texports.default = EasePack;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /*!\n   * GSAP 3.7.1\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2021, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n      lineHeight: \"\"\n    }\n  },\n      _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n  },\n      _suppressOverwrites,\n      _bigNum = 1e8,\n      _tinyNum = 1 / _bigNum,\n      _2PI = Math.PI * 2,\n      _HALF_PI = _2PI / 4,\n      _gsID = 0,\n      _sqrt = Math.sqrt,\n      _cos = Math.cos,\n      _sin = Math.sin,\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n  },\n      _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n      _isArray = Array.isArray,\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n      _relExp = /[+-]=-?[.\\d]+/,\n      _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi,\n      _unitExp = /[\\d.+\\-=]+(?:e[-+]\\d*)*/i,\n      _globalTimeline,\n      _win,\n      _coreInitted,\n      _doc,\n      _globals = {},\n      _installScope = {},\n      _coreReady,\n      _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n  },\n      _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n  },\n      _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n  },\n      _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n  },\n      _emptyFunc = function _emptyFunc() {\n    return 0;\n  },\n      _reservedProps = {},\n      _lazyTweens = [],\n      _lazyLookup = {},\n      _lastRenderedFrame,\n      _plugins = {},\n      _effects = {},\n      _nextGCFrame = 30,\n      _harnessPlugins = [],\n      _callbackNames = \"\",\n      _harness = function _harness(targets) {\n    var target = targets[0],\n        harnessPlugin,\n        i;\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n      i = _harnessPlugins.length;\n\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n      harnessPlugin = _harnessPlugins[i];\n    }\n\n    i = targets.length;\n\n    while (i--) {\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n\n    return targets;\n  },\n      _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n  },\n      _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n  },\n      _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    var l = toFind.length,\n        i = 0;\n\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n    return i < l;\n  },\n      _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length,\n        a = _lazyTweens.slice(0),\n        i,\n        tween;\n\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n  },\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && _lazyRender();\n    animation.render(time, suppressEvents, force);\n    _lazyTweens.length && _lazyRender();\n  },\n      _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n  },\n      _passThrough = function _passThrough(p) {\n    return p;\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || p === \"duration\" || p === \"ease\" || (obj[p] = defaults[p]);\n    }\n  },\n      _merge = function _merge(base, toMerge) {\n    for (var p in toMerge) {\n      base[p] = toMerge[p];\n    }\n\n    return base;\n  },\n      _mergeDeep = function _mergeDeep(base, toMerge) {\n    for (var p in toMerge) {\n      p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n\n    return base;\n  },\n      _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {},\n        p;\n\n    for (p in obj) {\n      p in excluding || (copy[p] = obj[p]);\n    }\n\n    return copy;\n  },\n      _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline,\n        func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;\n\n    if (_isNotFalse(vars.inherit)) {\n      while (parent) {\n        func(vars, parent.vars.defaults);\n        parent = parent.parent || parent._dp;\n      }\n    }\n\n    return vars;\n  },\n      _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length,\n        match = i === a2.length;\n\n    while (match && i-- && a1[i] === a2[i]) {}\n\n    return i < 0;\n  },\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = parent[lastProp],\n        t;\n\n    if (sortBy) {\n      t = child[sortBy];\n\n      while (prev && prev[sortBy] > t) {\n        prev = prev._prev;\n      }\n    }\n\n    if (prev) {\n      child._next = prev._next;\n      prev._next = child;\n    } else {\n      child._next = parent[firstProp];\n      parent[firstProp] = child;\n    }\n\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      parent[lastProp] = child;\n    }\n\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n  },\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = child._prev,\n        next = child._next;\n\n    if (prev) {\n      prev._next = next;\n    } else if (parent[firstProp] === child) {\n      parent[firstProp] = next;\n    }\n\n    if (next) {\n      next._prev = prev;\n    } else if (parent[lastProp] === child) {\n      parent[lastProp] = prev;\n    }\n\n    child._next = child._prev = child.parent = null;\n  },\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\n    child._act = 0;\n  },\n      _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n      var a = animation;\n\n      while (a) {\n        a._dirty = 1;\n        a = a.parent;\n      }\n    }\n\n    return animation;\n  },\n      _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n\n    while (parent && parent.parent) {\n      parent._dirty = 1;\n      parent.totalDuration();\n      parent = parent.parent;\n    }\n\n    return animation;\n  },\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n  },\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n  },\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n  },\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n  },\n      _setEnd = function _setEnd(animation) {\n    return animation._end = _round(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n  },\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    var parent = animation._dp;\n\n    if (parent && parent.smoothChildTiming && animation._ts) {\n      animation._start = _round(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n      _setEnd(animation);\n\n      parent._dirty || _uncache(parent, animation);\n    }\n\n    return animation;\n  },\n      _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n\n    if (child._time || child._initted && !child._dur) {\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n        child.render(t, true);\n      }\n    }\n\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n      if (timeline._dur < timeline.duration()) {\n        t = timeline;\n\n        while (t._dp) {\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\n          t = t._dp;\n        }\n      }\n\n      timeline._zTime = -_tinyNum;\n    }\n  },\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _round((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _round(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    return timeline;\n  },\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n  },\n      _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {\n    _initTween(tween, totalTime);\n\n    if (!tween._initted) {\n      return 1;\n    }\n\n    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n      _lazyTweens.push(tween);\n\n      tween._lazy = [totalTime, suppressEvents];\n      return 1;\n    }\n  },\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n  },\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n  },\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio,\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\n        repeatDelay = tween._rDelay,\n        tTime = 0,\n        pt,\n        iteration,\n        prevIteration;\n\n    if (repeatDelay && tween._repeat) {\n      tTime = _clamp(0, tween._tDur, totalTime);\n      iteration = _animationCycle(tTime, repeatDelay);\n      prevIteration = _animationCycle(tween._tTime, repeatDelay);\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n      if (iteration !== prevIteration) {\n        prevRatio = 1 - ratio;\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n      }\n    }\n\n    if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {\n        return;\n      }\n\n      prevIteration = tween._zTime;\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\n      tween.ratio = ratio;\n      tween._from && (ratio = 1 - ratio);\n      tween._time = 0;\n      tween._tTime = tTime;\n      pt = tween._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);\n      tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n        ratio && _removeFromParent(tween, 1);\n\n        if (!suppressEvents) {\n          _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n          tween._prom && tween._prom();\n        }\n      }\n    } else if (!tween._zTime) {\n      tween._zTime = totalTime;\n    }\n  },\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n\n    if (time > prevTime) {\n      child = animation._first;\n\n      while (child && child._start <= time) {\n        if (!child._dur && child.data === \"isPause\" && child._start > prevTime) {\n          return child;\n        }\n\n        child = child._next;\n      }\n    } else {\n      child = animation._last;\n\n      while (child && child._start >= time) {\n        if (!child._dur && child.data === \"isPause\" && child._start < prevTime) {\n          return child;\n        }\n\n        child = child._prev;\n      }\n    }\n  },\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat,\n        dur = _round(duration) || 0,\n        totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _round(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n  },\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n  },\n      _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n  },\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels,\n        recent = animation._recent || _zeroPosition,\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n        i,\n        offset,\n        isPercent;\n\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n      offset = position.charAt(0);\n      isPercent = position.substr(-1) === \"%\";\n      i = position.indexOf(\"=\");\n\n      if (offset === \"<\" || offset === \">\") {\n        i >= 0 && (position = position.replace(/=/, \"\"));\n        return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n      }\n\n      if (i < 0) {\n        position in labels || (labels[position] = clippedDuration);\n        return labels[position];\n      }\n\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n\n      if (isPercent && percentAnimation) {\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n      }\n\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n\n    return position == null ? clippedDuration : +position;\n  },\n      _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]),\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n        vars = params[varsIndex],\n        irVars,\n        parent;\n\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n\n    if (type) {\n      irVars = vars;\n      parent = timeline;\n\n      while (parent && !(\"immediateRender\" in irVars)) {\n        irVars = parent.vars.defaults || {};\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n      }\n\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n    }\n\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n  },\n      _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n  },\n      _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  },\n      getUnit = function getUnit(value) {\n    if (typeof value !== \"string\") {\n      return \"\";\n    }\n\n    var v = _unitExp.exec(value);\n\n    return v ? value.substr(v.index + v[0].length) : \"\";\n  },\n      clamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function (v) {\n      return _clamp(min, max, v);\n    });\n  },\n      _slice = [].slice,\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n  },\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n      accumulator = [];\n    }\n\n    return ar.forEach(function (value) {\n      var _accumulator;\n\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n  },\n      toArray = function toArray(value, scope, leaveStrings) {\n    return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n  },\n      selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function (v) {\n      var el = value.current || value.nativeElement || value;\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n  },\n      shuffle = function shuffle(a) {\n    return a.sort(function () {\n      return .5 - Math.random();\n    });\n  },\n      distribute = function distribute(v) {\n    if (_isFunction(v)) {\n      return v;\n    }\n\n    var vars = _isObject(v) ? v : {\n      each: v\n    },\n        ease = _parseEase(vars.ease),\n        from = vars.from || 0,\n        base = parseFloat(vars.base) || 0,\n        cache = {},\n        isDecimal = from > 0 && from < 1,\n        ratios = isNaN(from) || isDecimal,\n        axis = vars.axis,\n        ratioX = from,\n        ratioY = from;\n\n    if (_isString(from)) {\n      ratioX = ratioY = {\n        center: .5,\n        edges: .5,\n        end: 1\n      }[from] || 0;\n    } else if (!isDecimal && ratios) {\n      ratioX = from[0];\n      ratioY = from[1];\n    }\n\n    return function (i, target, a) {\n      var l = (a || vars).length,\n          distances = cache[l],\n          originX,\n          originY,\n          x,\n          y,\n          d,\n          j,\n          max,\n          min,\n          wrapAt;\n\n      if (!distances) {\n        wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n        if (!wrapAt) {\n          max = -_bigNum;\n\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n          wrapAt--;\n        }\n\n        distances = cache[l] = [];\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n        originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n        max = 0;\n        min = _bigNum;\n\n        for (j = 0; j < l; j++) {\n          x = j % wrapAt - originX;\n          y = originY - (j / wrapAt | 0);\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n          d > max && (max = d);\n          d < min && (min = d);\n        }\n\n        from === \"random\" && shuffle(distances);\n        distances.max = max - min;\n        distances.min = min;\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n        distances.b = l < 0 ? base - l : base;\n        distances.u = getUnit(vars.amount || vars.each) || 0;\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\n      }\n\n      l = (distances[i] - distances.min) / distances.max || 0;\n      return _round(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n    };\n  },\n      _roundModifier = function _roundModifier(v) {\n    var p = v < 1 ? Math.pow(10, (v + \"\").length - 2) : 1;\n    return function (raw) {\n      var n = Math.round(parseFloat(raw) / v) * v * p;\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n    };\n  },\n      snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo),\n        radius,\n        is2D;\n\n    if (!isArray && _isObject(snapTo)) {\n      radius = isArray = snapTo.radius || _bigNum;\n\n      if (snapTo.values) {\n        snapTo = toArray(snapTo.values);\n\n        if (is2D = !_isNumber(snapTo[0])) {\n          radius *= radius;\n        }\n      } else {\n        snapTo = _roundModifier(snapTo.increment);\n      }\n    }\n\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n      is2D = snapTo(raw);\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function (raw) {\n      var x = parseFloat(is2D ? raw.x : raw),\n          y = parseFloat(is2D ? raw.y : 0),\n          min = _bigNum,\n          closest = 0,\n          i = snapTo.length,\n          dx,\n          dy;\n\n      while (i--) {\n        if (is2D) {\n          dx = snapTo[i].x - x;\n          dy = snapTo[i].y - y;\n          dx = dx * dx + dy * dy;\n        } else {\n          dx = Math.abs(snapTo[i] - x);\n        }\n\n        if (dx < min) {\n          min = dx;\n          closest = i;\n        }\n      }\n\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n  },\n      random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n  },\n      pipe = function pipe() {\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n      functions[_key] = arguments[_key];\n    }\n\n    return function (value) {\n      return functions.reduce(function (v, f) {\n        return f(v);\n      }, value);\n    };\n  },\n      unitize = function unitize(func, unit) {\n    return function (value) {\n      return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n  },\n      normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n  },\n      _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function (index) {\n      return a[~~wrapper(index)];\n    });\n  },\n      wrap = function wrap(min, max, value) {\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n      return (range + (value - min) % range) % range + min;\n    });\n  },\n      wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min,\n        total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n      value = (total + (value - min) % total) % total || 0;\n      return min + (value > range ? total - value : value);\n    });\n  },\n      _replaceRandom = function _replaceRandom(value) {\n    var prev = 0,\n        s = \"\",\n        i,\n        nums,\n        end,\n        isArray;\n\n    while (~(i = value.indexOf(\"random(\", prev))) {\n      end = value.indexOf(\")\", i);\n      isArray = value.charAt(i + 7) === \"[\";\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n      prev = end + 1;\n    }\n\n    return s + value.substr(prev, value.length - prev);\n  },\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin,\n        outRange = outMax - outMin;\n    return _conditionalReturn(value, function (value) {\n      return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n  },\n      interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function (p) {\n      return (1 - p) * start + p * end;\n    };\n\n    if (!func) {\n      var isString = _isString(start),\n          master = {},\n          p,\n          i,\n          interpolators,\n          l,\n          il;\n\n      progress === true && (mutate = 1) && (progress = null);\n\n      if (isString) {\n        start = {\n          p: start\n        };\n        end = {\n          p: end\n        };\n      } else if (_isArray(start) && !_isArray(end)) {\n        interpolators = [];\n        l = start.length;\n        il = l - 2;\n\n        for (i = 1; i < l; i++) {\n          interpolators.push(interpolate(start[i - 1], start[i]));\n        }\n\n        l--;\n\n        func = function func(p) {\n          p *= l;\n          var i = Math.min(il, ~~p);\n          return interpolators[i](p - i);\n        };\n\n        progress = end;\n      } else if (!mutate) {\n        start = _merge(_isArray(start) ? [] : {}, start);\n      }\n\n      if (!interpolators) {\n        for (p in end) {\n          _addPropTween.call(master, start, p, \"get\", end[p]);\n        }\n\n        func = function func(p) {\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\n        };\n      }\n    }\n\n    return _conditionalReturn(progress, func);\n  },\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    var labels = timeline.labels,\n        min = _bigNum,\n        p,\n        distance,\n        label;\n\n    for (p in labels) {\n      distance = labels[p] - fromTime;\n\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n        label = p;\n        min = distance;\n      }\n    }\n\n    return label;\n  },\n      _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars,\n        callback = v[type],\n        params,\n        scope;\n\n    if (!callback) {\n      return;\n    }\n\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\n    return params ? callback.apply(scope, params) : callback.call(scope);\n  },\n      _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n\n    animation.scrollTrigger && animation.scrollTrigger.kill(false);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n  },\n      _quickTween,\n      _createPlugin = function _createPlugin(config) {\n    config = !config.name && config[\"default\"] || config;\n\n    var name = config.name,\n        isFunc = _isFunction(config),\n        Plugin = name && !isFunc && config.init ? function () {\n      this._props = [];\n    } : config,\n        instanceDefaults = {\n      init: _emptyFunc,\n      render: _renderPropTweens,\n      add: _addPropTween,\n      kill: _killPropTweensOf,\n      modifier: _addPluginModifier,\n      rawVars: 0\n    },\n        statics = {\n      targetTest: 0,\n      get: 0,\n      getSetter: _getSetter,\n      aliases: {},\n      register: 0\n    };\n\n    _wake();\n\n    if (config !== Plugin) {\n      if (_plugins[name]) {\n        return;\n      }\n\n      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n\n      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n\n      _plugins[Plugin.prop = name] = Plugin;\n\n      if (config.targetTest) {\n        _harnessPlugins.push(Plugin);\n\n        _reservedProps[name] = 1;\n      }\n\n      name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n    }\n\n    _addGlobal(name, Plugin);\n\n    config.register && config.register(gsap, Plugin, PropTween);\n  },\n      _255 = 255,\n      _colorLookup = {\n    aqua: [0, _255, _255],\n    lime: [0, _255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, _255],\n    navy: [0, 0, 128],\n    white: [_255, _255, _255],\n    olive: [128, 128, 0],\n    yellow: [_255, _255, 0],\n    orange: [_255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [_255, 0, 0],\n    pink: [_255, 192, 203],\n    cyan: [0, _255, _255],\n    transparent: [_255, _255, _255, 0]\n  },\n      _hue = function _hue(h, m1, m2) {\n    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n  },\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n        r,\n        g,\n        b,\n        h,\n        s,\n        l,\n        max,\n        min,\n        d,\n        wasHSL;\n\n    if (!a) {\n      if (v.substr(-1) === \",\") {\n        v = v.substr(0, v.length - 1);\n      }\n\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === \"#\") {\n        if (v.length < 6) {\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n        }\n\n        if (v.length === 9) {\n          a = parseInt(v.substr(1, 6), 16);\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n        }\n\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & _255, v & _255];\n      } else if (v.substr(0, 3) === \"hsl\") {\n        a = wasHSL = v.match(_strictNumExp);\n\n        if (!toHSL) {\n          h = +a[0] % 360 / 360;\n          s = +a[1] / 100;\n          l = +a[2] / 100;\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          a.length > 3 && (a[3] *= 1);\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (~v.indexOf(\"=\")) {\n          a = v.match(_numExp);\n          forceAlpha && a.length < 4 && (a[3] = 1);\n          return a;\n        }\n      } else {\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\n      }\n\n      a = a.map(Number);\n    }\n\n    if (toHSL && !wasHSL) {\n      r = a[0] / _255;\n      g = a[1] / _255;\n      b = a[2] / _255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n\n      a[0] = ~~(h + .5);\n      a[1] = ~~(s * 100 + .5);\n      a[2] = ~~(l * 100 + .5);\n    }\n\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n  },\n      _colorOrderData = function _colorOrderData(v) {\n    var values = [],\n        c = [],\n        i = -1;\n    v.split(_colorExp).forEach(function (v) {\n      var a = v.match(_numWithUnitExp) || [];\n      values.push.apply(values, a);\n      c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n  },\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\",\n        colors = (s + result).match(_colorExp),\n        type = toHSL ? \"hsla(\" : \"rgba(\",\n        i = 0,\n        c,\n        shell,\n        d,\n        l;\n\n    if (!colors) {\n      return s;\n    }\n\n    colors = colors.map(function (color) {\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n\n    if (orderMatchData) {\n      d = _colorOrderData(s);\n      c = orderMatchData.c;\n\n      if (c.join(result) !== d.c.join(result)) {\n        shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n        l = shell.length - 1;\n\n        for (; i < l; i++) {\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n        }\n      }\n    }\n\n    if (!shell) {\n      shell = s.split(_colorExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + colors[i];\n      }\n    }\n\n    return result + shell[l];\n  },\n      _colorExp = function () {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n        p;\n\n    for (p in _colorLookup) {\n      s += \"|\" + p + \"\\\\b\";\n    }\n\n    return new RegExp(s + \")\", \"gi\");\n  }(),\n      _hslExp = /hsl[a]?\\(/,\n      _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"),\n        toHSL;\n    _colorExp.lastIndex = 0;\n\n    if (_colorExp.test(combined)) {\n      toHSL = _hslExp.test(combined);\n      a[1] = _formatColors(a[1], toHSL);\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n      return true;\n    }\n  },\n      _tickerActive,\n      _ticker = function () {\n    var _getTime = Date.now,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _startTime = _getTime(),\n        _lastUpdate = _startTime,\n        _gap = 1000 / 240,\n        _nextTime = _gap,\n        _listeners = [],\n        _id,\n        _req,\n        _raf,\n        _self,\n        _delta,\n        _i,\n        _tick = function _tick(v) {\n      var elapsed = _getTime() - _lastUpdate,\n          manual = v === true,\n          overlap,\n          dispatch,\n          time,\n          frame;\n\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n      _lastUpdate += elapsed;\n      time = _lastUpdate - _startTime;\n      overlap = time - _nextTime;\n\n      if (overlap > 0 || manual) {\n        frame = ++_self.frame;\n        _delta = time - _self.time * 1000;\n        _self.time = time = time / 1000;\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n        dispatch = 1;\n      }\n\n      manual || (_id = _req(_tick));\n\n      if (dispatch) {\n        for (_i = 0; _i < _listeners.length; _i++) {\n          _listeners[_i](time, _delta, frame, v);\n        }\n      }\n    };\n\n    _self = {\n      time: 0,\n      frame: 0,\n      tick: function tick() {\n        _tick(true);\n      },\n      deltaRatio: function deltaRatio(fps) {\n        return _delta / (1000 / (fps || 60));\n      },\n      wake: function wake() {\n        if (_coreReady) {\n          if (!_coreInitted && _windowExists()) {\n            _win = _coreInitted = window;\n            _doc = _win.document || {};\n            _globals.gsap = gsap;\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n            _raf = _win.requestAnimationFrame;\n          }\n\n          _id && _self.sleep();\n\n          _req = _raf || function (f) {\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n          };\n\n          _tickerActive = 1;\n\n          _tick(2);\n        }\n      },\n      sleep: function sleep() {\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n        _tickerActive = 0;\n        _req = _emptyFunc;\n      },\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n        _lagThreshold = threshold || 1 / _tinyNum;\n        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n      },\n      fps: function fps(_fps) {\n        _gap = 1000 / (_fps || 240);\n        _nextTime = _self.time * 1000 + _gap;\n      },\n      add: function add(callback) {\n        _listeners.indexOf(callback) < 0 && _listeners.push(callback);\n\n        _wake();\n      },\n      remove: function remove(callback) {\n        var i;\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n      },\n      _listeners: _listeners\n    };\n    return _self;\n  }(),\n      _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n  },\n      _easeMap = {},\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n      _quotesExp = /[\"']/g,\n      _parseObjectInString = function _parseObjectInString(value) {\n    var obj = {},\n        split = value.substr(1, value.length - 3).split(\":\"),\n        key = split[0],\n        i = 1,\n        l = split.length,\n        index,\n        val,\n        parsedVal;\n\n    for (; i < l; i++) {\n      val = split[i];\n      index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n      parsedVal = val.substr(0, index);\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n      key = val.substr(index + 1).trim();\n    }\n\n    return obj;\n  },\n      _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1,\n        close = value.indexOf(\")\"),\n        nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n  },\n      _configEaseFromString = function _configEaseFromString(name) {\n    var split = (name + \"\").split(\"(\"),\n        ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n  },\n      _invertEase = function _invertEase(ease) {\n    return function (p) {\n      return 1 - ease(1 - p);\n    };\n  },\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first,\n        ease;\n\n    while (child) {\n      if (child instanceof Timeline) {\n        _propagateYoyoEase(child, isYoyo);\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n        if (child.timeline) {\n          _propagateYoyoEase(child.timeline, isYoyo);\n        } else {\n          ease = child._ease;\n          child._ease = child._yEase;\n          child._yEase = ease;\n          child._yoyo = isYoyo;\n        }\n      }\n\n      child = child._next;\n    }\n  },\n      _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n  },\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n      easeOut = function easeOut(p) {\n        return 1 - easeIn(1 - p);\n      };\n    }\n\n    if (easeInOut === void 0) {\n      easeInOut = function easeInOut(p) {\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n      };\n    }\n\n    var ease = {\n      easeIn: easeIn,\n      easeOut: easeOut,\n      easeInOut: easeInOut\n    },\n        lowercaseName;\n\n    _forEachName(names, function (name) {\n      _easeMap[name] = _globals[name] = ease;\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n      for (var p in ease) {\n        _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n      }\n    });\n\n    return ease;\n  },\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function (p) {\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n  },\n      _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1,\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n        easeOut = function easeOut(p) {\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    p2 = _2PI / p2;\n\n    ease.config = function (amplitude, period) {\n      return _configElastic(type, amplitude, period);\n    };\n\n    return ease;\n  },\n      _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n      overshoot = 1.70158;\n    }\n\n    var easeOut = function easeOut(p) {\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    ease.config = function (overshoot) {\n      return _configBack(type, overshoot);\n    };\n\n    return ease;\n  };\n\n  _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n    var power = i < 5 ? i + 1 : i;\n\n    _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n      return Math.pow(p, power);\n    } : function (p) {\n      return p;\n    }, function (p) {\n      return 1 - Math.pow(1 - p, power);\n    }, function (p) {\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n  });\n\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n  _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n  (function (n, c) {\n    var n1 = 1 / c,\n        n2 = 2 * n1,\n        n3 = 2.5 * n1,\n        easeOut = function easeOut(p) {\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n\n    _insertEase(\"Bounce\", function (p) {\n      return 1 - easeOut(1 - p);\n    }, easeOut);\n  })(7.5625, 2.75);\n\n  _insertEase(\"Expo\", function (p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n  });\n\n  _insertEase(\"Circ\", function (p) {\n    return -(_sqrt(1 - p * p) - 1);\n  });\n\n  _insertEase(\"Sine\", function (p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n  });\n\n  _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n      if (steps === void 0) {\n        steps = 1;\n      }\n\n      var p1 = 1 / steps,\n          p2 = steps + (immediateStart ? 0 : 1),\n          p3 = immediateStart ? 1 : 0,\n          max = 1 - _tinyNum;\n      return function (p) {\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n      };\n    }\n  };\n  _defaults.ease = _easeMap[\"quad.out\"];\n\n  _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n  });\n\n  var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n  };\n  var Animation = function () {\n    function Animation(vars) {\n      this.vars = vars;\n      this._delay = +vars.delay || 0;\n\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n        this._rDelay = vars.repeatDelay || 0;\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n      }\n\n      this._ts = 1;\n\n      _setDuration(this, +vars.duration, 1, 1);\n\n      this.data = vars.data;\n      _tickerActive || _ticker.wake();\n    }\n\n    var _proto = Animation.prototype;\n\n    _proto.delay = function delay(value) {\n      if (value || value === 0) {\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n        this._delay = value;\n        return this;\n      }\n\n      return this._delay;\n    };\n\n    _proto.duration = function duration(value) {\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n\n    _proto.totalDuration = function totalDuration(value) {\n      if (!arguments.length) {\n        return this._tDur;\n      }\n\n      this._dirty = 0;\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n      _wake();\n\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      var parent = this._dp;\n\n      if (parent && parent.smoothChildTiming && this._ts) {\n        _alignPlayhead(this, _totalTime);\n\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\n\n        while (parent.parent) {\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n            parent.totalTime(parent._tTime, true);\n          }\n\n          parent = parent.parent;\n        }\n\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n          _addToTimeline(this._dp, this, this._start - this._delay);\n        }\n      }\n\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n        this._ts || (this._pTime = _totalTime);\n\n        _lazySafeRender(this, _totalTime, suppressEvents);\n      }\n\n      return this;\n    };\n\n    _proto.time = function time(value, suppressEvents) {\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n    };\n\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n\n    _proto.progress = function progress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n\n    _proto.iteration = function iteration(value, suppressEvents) {\n      var cycleDuration = this.duration() + this._rDelay;\n\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    };\n\n    _proto.timeScale = function timeScale(value) {\n      if (!arguments.length) {\n        return this._rts === -_tinyNum ? 0 : this._rts;\n      }\n\n      if (this._rts === value) {\n        return this;\n      }\n\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n      this._rts = +value || 0;\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n      return _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));\n    };\n\n    _proto.paused = function paused(value) {\n      if (!arguments.length) {\n        return this._ps;\n      }\n\n      if (this._ps !== value) {\n        this._ps = value;\n\n        if (value) {\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n          this._ts = this._act = 0;\n        } else {\n          _wake();\n\n          this._ts = this._rts;\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n        }\n      }\n\n      return this;\n    };\n\n    _proto.startTime = function startTime(value) {\n      if (arguments.length) {\n        this._start = value;\n        var parent = this.parent || this._dp;\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n        return this;\n      }\n\n      return this._start;\n    };\n\n    _proto.endTime = function endTime(includeRepeats) {\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);\n    };\n\n    _proto.rawTime = function rawTime(wrapRepeats) {\n      var parent = this.parent || this._dp;\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n\n    _proto.globalTime = function globalTime(rawTime) {\n      var animation = this,\n          time = arguments.length ? rawTime : animation.rawTime();\n\n      while (animation) {\n        time = animation._start + time / (animation._ts || 1);\n        animation = animation._dp;\n      }\n\n      return time;\n    };\n\n    _proto.repeat = function repeat(value) {\n      if (arguments.length) {\n        this._repeat = value === Infinity ? -2 : value;\n        return _onUpdateTotalDuration(this);\n      }\n\n      return this._repeat === -2 ? Infinity : this._repeat;\n    };\n\n    _proto.repeatDelay = function repeatDelay(value) {\n      if (arguments.length) {\n        var time = this._time;\n        this._rDelay = value;\n\n        _onUpdateTotalDuration(this);\n\n        return time ? this.time(time) : this;\n      }\n\n      return this._rDelay;\n    };\n\n    _proto.yoyo = function yoyo(value) {\n      if (arguments.length) {\n        this._yoyo = value;\n        return this;\n      }\n\n      return this._yoyo;\n    };\n\n    _proto.seek = function seek(position, suppressEvents) {\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n\n    _proto.play = function play(from, suppressEvents) {\n      from != null && this.seek(from, suppressEvents);\n      return this.reversed(false).paused(false);\n    };\n\n    _proto.reverse = function reverse(from, suppressEvents) {\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\n      return this.reversed(true).paused(false);\n    };\n\n    _proto.pause = function pause(atTime, suppressEvents) {\n      atTime != null && this.seek(atTime, suppressEvents);\n      return this.paused(true);\n    };\n\n    _proto.resume = function resume() {\n      return this.paused(false);\n    };\n\n    _proto.reversed = function reversed(value) {\n      if (arguments.length) {\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n        return this;\n      }\n\n      return this._rts < 0;\n    };\n\n    _proto.invalidate = function invalidate() {\n      this._initted = this._act = 0;\n      this._zTime = -_tinyNum;\n      return this;\n    };\n\n    _proto.isActive = function isActive() {\n      var parent = this.parent || this._dp,\n          start = this._start,\n          rawTime;\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n      var vars = this.vars;\n\n      if (arguments.length > 1) {\n        if (!callback) {\n          delete vars[type];\n        } else {\n          vars[type] = callback;\n          params && (vars[type + \"Params\"] = params);\n          type === \"onUpdate\" && (this._onUpdate = callback);\n        }\n\n        return this;\n      }\n\n      return vars[type];\n    };\n\n    _proto.then = function then(onFulfilled) {\n      var self = this;\n      return new Promise(function (resolve) {\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n            _resolve = function _resolve() {\n          var _then = self.then;\n          self.then = null;\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n          resolve(f);\n          self.then = _then;\n        };\n\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n          _resolve();\n        } else {\n          self._prom = _resolve;\n        }\n      });\n    };\n\n    _proto.kill = function kill() {\n      _interrupt(this);\n    };\n\n    return Animation;\n  }();\n\n  _setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n  });\n\n  var Timeline = function (_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n\n    function Timeline(vars, position) {\n      var _this;\n\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      _this = _Animation.call(this, vars) || this;\n      _this.labels = {};\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n      _this._sort = _isNotFalse(vars.sortChildren);\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n      vars.reversed && _this.reverse();\n      vars.paused && _this.paused(true);\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n      return _this;\n    }\n\n    var _proto2 = Timeline.prototype;\n\n    _proto2.to = function to(targets, vars, position) {\n      _createTweenType(0, arguments, this);\n\n      return this;\n    };\n\n    _proto2.from = function from(targets, vars, position) {\n      _createTweenType(1, arguments, this);\n\n      return this;\n    };\n\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n      _createTweenType(2, arguments, this);\n\n      return this;\n    };\n\n    _proto2.set = function set(targets, vars, position) {\n      vars.duration = 0;\n      vars.parent = this;\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n      vars.immediateRender = !!vars.immediateRender;\n      new Tween(targets, vars, _parsePosition(this, position), 1);\n      return this;\n    };\n\n    _proto2.call = function call(callback, params, position) {\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    };\n\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.duration = duration;\n      vars.stagger = vars.stagger || stagger;\n      vars.onComplete = onCompleteAll;\n      vars.onCompleteParams = onCompleteAllParams;\n      vars.parent = this;\n      new Tween(targets, vars, _parsePosition(this, position));\n      return this;\n    };\n\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.runBackwards = 1;\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      toVars.startAt = fromVars;\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\n          dur = this._dur,\n          tTime = this !== _globalTimeline && totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n          time,\n          child,\n          next,\n          iteration,\n          cycleDuration,\n          prevPaused,\n          pauseTween,\n          timeScale,\n          prevStart,\n          prevIteration,\n          yoyo,\n          isYoyo;\n\n      if (tTime !== this._tTime || force || crossingStart) {\n        if (prevTime !== this._time && dur) {\n          tTime += this._time - prevTime;\n          totalTime += this._time - prevTime;\n        }\n\n        time = tTime;\n        prevStart = this._start;\n        timeScale = this._ts;\n        prevPaused = !timeScale;\n\n        if (crossingStart) {\n          dur || (prevTime = this._zTime);\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\n        }\n\n        if (this._repeat) {\n          yoyo = this._yoyo;\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _round(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);\n\n          if (yoyo && iteration & 1) {\n            time = dur - time;\n            isYoyo = 1;\n          }\n\n          if (iteration !== prevIteration && !this._lock) {\n            var rewinding = yoyo && prevIteration & 1,\n                doesWrap = rewinding === (yoyo && iteration & 1);\n            iteration < prevIteration && (rewinding = !rewinding);\n            prevTime = rewinding ? 0 : dur;\n            this._lock = 1;\n            this.render(prevTime || (isYoyo ? 0 : _round(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n            this._tTime = tTime;\n            !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n              return this;\n            }\n\n            dur = this._dur;\n            tDur = this._tDur;\n\n            if (doesWrap) {\n              this._lock = 2;\n              prevTime = rewinding ? dur : -0.0001;\n              this.render(prevTime, true);\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\n            }\n\n            this._lock = 0;\n\n            if (!this._ts && !prevPaused) {\n              return this;\n            }\n\n            _propagateYoyoEase(this, isYoyo);\n          }\n        }\n\n        if (this._hasPause && !this._forcing && this._lock < 2) {\n          pauseTween = _findNextPauseTween(this, _round(prevTime), _round(time));\n\n          if (pauseTween) {\n            tTime -= time - (time = pauseTween._start);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n        this._act = !timeScale;\n\n        if (!this._initted) {\n          this._onUpdate = this.vars.onUpdate;\n          this._initted = 1;\n          this._zTime = totalTime;\n          prevTime = 0;\n        }\n\n        if (!prevTime && time && !suppressEvents) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        if (time >= prevTime && totalTime >= 0) {\n          child = this._first;\n\n          while (child) {\n            next = child._next;\n\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = -_tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        } else {\n          child = this._last;\n          var adjustedTime = totalTime < 0 ? totalTime : time;\n\n          while (child) {\n            next = child._prev;\n\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        }\n\n        if (pauseTween && !suppressEvents) {\n          this.pause();\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n          if (this._ts) {\n            this._start = prevStart;\n\n            _setEnd(this);\n\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n        if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto2.add = function add(child, position) {\n      var _this2 = this;\n\n      _isNumber(position) || (position = _parsePosition(this, position, child));\n\n      if (!(child instanceof Animation)) {\n        if (_isArray(child)) {\n          child.forEach(function (obj) {\n            return _this2.add(obj, position);\n          });\n          return this;\n        }\n\n        if (_isString(child)) {\n          return this.addLabel(child, position);\n        }\n\n        if (_isFunction(child)) {\n          child = Tween.delayedCall(0, child);\n        } else {\n          return this;\n        }\n      }\n\n      return this !== child ? _addToTimeline(this, child, position) : this;\n    };\n\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n      if (nested === void 0) {\n        nested = true;\n      }\n\n      if (tweens === void 0) {\n        tweens = true;\n      }\n\n      if (timelines === void 0) {\n        timelines = true;\n      }\n\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = -_bigNum;\n      }\n\n      var a = [],\n          child = this._first;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          if (child instanceof Tween) {\n            tweens && a.push(child);\n          } else {\n            timelines && a.push(child);\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n          }\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.getById = function getById(id) {\n      var animations = this.getChildren(1, 1, 1),\n          i = animations.length;\n\n      while (i--) {\n        if (animations[i].vars.id === id) {\n          return animations[i];\n        }\n      }\n    };\n\n    _proto2.remove = function remove(child) {\n      if (_isString(child)) {\n        return this.removeLabel(child);\n      }\n\n      if (_isFunction(child)) {\n        return this.killTweensOf(child);\n      }\n\n      _removeLinkedListItem(this, child);\n\n      if (child === this._recent) {\n        this._recent = this._last;\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      this._forcing = 1;\n\n      if (!this._dp && this._ts) {\n        this._start = _round(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n      }\n\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n      this._forcing = 0;\n      return this;\n    };\n\n    _proto2.addLabel = function addLabel(label, position) {\n      this.labels[label] = _parsePosition(this, position);\n      return this;\n    };\n\n    _proto2.removeLabel = function removeLabel(label) {\n      delete this.labels[label];\n      return this;\n    };\n\n    _proto2.addPause = function addPause(position, callback, params) {\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n      t.data = \"isPause\";\n      this._hasPause = 1;\n      return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n\n    _proto2.removePause = function removePause(position) {\n      var child = this._first;\n      position = _parsePosition(this, position);\n\n      while (child) {\n        if (child._start === position && child.data === \"isPause\") {\n          _removeFromParent(child);\n        }\n\n        child = child._next;\n      }\n    };\n\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      var tweens = this.getTweensOf(targets, onlyActive),\n          i = tweens.length;\n\n      while (i--) {\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n      }\n\n      return this;\n    };\n\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n      var a = [],\n          parsedTargets = toArray(targets),\n          child = this._first,\n          isGlobalTime = _isNumber(onlyActive),\n          children;\n\n      while (child) {\n        if (child instanceof Tween) {\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n            a.push(child);\n          }\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n          a.push.apply(a, children);\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.tweenTo = function tweenTo(position, vars) {\n      vars = vars || {};\n\n      var tl = this,\n          endTime = _parsePosition(tl, position),\n          _vars = vars,\n          startAt = _vars.startAt,\n          _onStart = _vars.onStart,\n          onStartParams = _vars.onStartParams,\n          immediateRender = _vars.immediateRender,\n          initted,\n          tween = Tween.to(tl, _setDefaults({\n        ease: vars.ease || \"none\",\n        lazy: false,\n        immediateRender: false,\n        time: endTime,\n        overwrite: \"auto\",\n        duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n        onStart: function onStart() {\n          tl.pause();\n\n          if (!initted) {\n            var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n            initted = 1;\n          }\n\n          _onStart && _onStart.apply(tween, onStartParams || []);\n        }\n      }, vars));\n\n      return immediateRender ? tween.render(0) : tween;\n    };\n\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n      return this.tweenTo(toPosition, _setDefaults({\n        startAt: {\n          time: _parsePosition(this, fromPosition)\n        }\n      }, vars));\n    };\n\n    _proto2.recent = function recent() {\n      return this._recent;\n    };\n\n    _proto2.nextLabel = function nextLabel(afterTime) {\n      if (afterTime === void 0) {\n        afterTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n      if (beforeTime === void 0) {\n        beforeTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n\n    _proto2.currentLabel = function currentLabel(value) {\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = 0;\n      }\n\n      var child = this._first,\n          labels = this.labels,\n          p;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          child._start += amount;\n          child._end += amount;\n        }\n\n        child = child._next;\n      }\n\n      if (adjustLabels) {\n        for (p in labels) {\n          if (labels[p] >= ignoreBeforeTime) {\n            labels[p] += amount;\n          }\n        }\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.invalidate = function invalidate() {\n      var child = this._first;\n      this._lock = 0;\n\n      while (child) {\n        child.invalidate();\n        child = child._next;\n      }\n\n      return _Animation.prototype.invalidate.call(this);\n    };\n\n    _proto2.clear = function clear(includeLabels) {\n      if (includeLabels === void 0) {\n        includeLabels = true;\n      }\n\n      var child = this._first,\n          next;\n\n      while (child) {\n        next = child._next;\n        this.remove(child);\n        child = next;\n      }\n\n      this._dp && (this._time = this._tTime = this._pTime = 0);\n      includeLabels && (this.labels = {});\n      return _uncache(this);\n    };\n\n    _proto2.totalDuration = function totalDuration(value) {\n      var max = 0,\n          self = this,\n          child = self._last,\n          prevStart = _bigNum,\n          prev,\n          start,\n          parent;\n\n      if (arguments.length) {\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n      }\n\n      if (self._dirty) {\n        parent = self.parent;\n\n        while (child) {\n          prev = child._prev;\n          child._dirty && child.totalDuration();\n          start = child._start;\n\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\n            self._lock = 1;\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n          } else {\n            prevStart = start;\n          }\n\n          if (start < 0 && child._ts) {\n            max -= start;\n\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n              self._start += start / self._ts;\n              self._time -= start;\n              self._tTime -= start;\n            }\n\n            self.shiftChildren(-start, false, -1e999);\n            prevStart = 0;\n          }\n\n          child._end > max && child._ts && (max = child._end);\n          child = prev;\n        }\n\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n        self._dirty = 0;\n      }\n\n      return self._tDur;\n    };\n\n    Timeline.updateRoot = function updateRoot(time) {\n      if (_globalTimeline._ts) {\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n        _lastRenderedFrame = _ticker.frame;\n      }\n\n      if (_ticker.frame >= _nextGCFrame) {\n        _nextGCFrame += _config.autoSleep || 120;\n        var child = _globalTimeline._first;\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n          while (child && !child._ts) {\n            child = child._next;\n          }\n\n          child || _ticker.sleep();\n        }\n      }\n    };\n\n    return Timeline;\n  }(Animation);\n\n  _setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n  });\n\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n        index = 0,\n        matchIndex = 0,\n        result,\n        startNums,\n        color,\n        endNum,\n        chunk,\n        startNum,\n        hasRandom,\n        a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (stringFilter) {\n      a = [start, end];\n      stringFilter(a, target, prop);\n      start = a[0];\n      end = a[1];\n    }\n\n    startNums = start.match(_complexStringNumExp) || [];\n\n    while (result = _complexStringNumExp.exec(end)) {\n      endNum = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\") {\n        color = 1;\n      }\n\n      if (endNum !== startNums[matchIndex++]) {\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          s: startNum,\n          c: endNum.charAt(1) === \"=\" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === \"-\" ? -1 : 1) : parseFloat(endNum) - startNum,\n          m: color && color < 4 ? Math.round : 0\n        };\n        index = _complexStringNumExp.lastIndex;\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    pt.fp = funcParam;\n\n    if (_relExp.test(end) || hasRandom) {\n      pt.e = 0;\n    }\n\n    this._pt = pt;\n    return pt;\n  },\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop],\n        parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n        pt;\n\n    if (_isString(end)) {\n      if (~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n      }\n\n      if (end.charAt(1) === \"=\") {\n        pt = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === \"-\" ? -1 : 1) + (getUnit(parsedStart) || 0);\n\n        if (pt || pt === 0) {\n          end = pt;\n        }\n      }\n    }\n\n    if (parsedStart !== end) {\n      if (!isNaN(parsedStart * end) && end !== \"\") {\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n        funcParam && (pt.fp = funcParam);\n        modifier && pt.modifier(modifier, this, target);\n        return this._pt = pt;\n      }\n\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n  },\n      _processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n\n    var copy = {},\n        p;\n\n    for (p in vars) {\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n\n    return copy;\n  },\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n      if (tween !== _quickTween) {\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n        i = plugin._props.length;\n\n        while (i--) {\n          ptLookup[plugin._props[i]] = pt;\n        }\n      }\n    }\n\n    return plugin;\n  },\n      _overwritingTween,\n      _initTween = function _initTween(tween, time) {\n    var vars = tween.vars,\n        ease = vars.ease,\n        startAt = vars.startAt,\n        immediateRender = vars.immediateRender,\n        lazy = vars.lazy,\n        onUpdate = vars.onUpdate,\n        onUpdateParams = vars.onUpdateParams,\n        callbackScope = vars.callbackScope,\n        runBackwards = vars.runBackwards,\n        yoyoEase = vars.yoyoEase,\n        keyframes = vars.keyframes,\n        autoRevert = vars.autoRevert,\n        dur = tween._dur,\n        prevStartAt = tween._startAt,\n        targets = tween._targets,\n        parent = tween.parent,\n        fullTargets = parent && parent.data === \"nested\" ? parent.parent._targets : targets,\n        autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n        tl = tween.timeline,\n        cleanVars,\n        i,\n        p,\n        pt,\n        target,\n        hasPriority,\n        gsData,\n        harness,\n        plugin,\n        ptLookup,\n        index,\n        harnessVars,\n        overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n      yoyoEase = tween._yEase;\n      tween._yEase = tween._ease;\n      tween._ease = yoyoEase;\n    }\n\n    tween._from = !tl && !!vars.runBackwards;\n\n    if (!tl) {\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\n      harnessVars = harness && vars[harness.prop];\n      cleanVars = _copyExcluding(vars, _reservedProps);\n      prevStartAt && prevStartAt.render(-1, true).kill();\n\n      if (startAt) {\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n          data: \"isStart\",\n          overwrite: false,\n          parent: parent,\n          immediateRender: true,\n          lazy: _isNotFalse(lazy),\n          startAt: null,\n          delay: 0,\n          onUpdate: onUpdate,\n          onUpdateParams: onUpdateParams,\n          callbackScope: callbackScope,\n          stagger: 0\n        }, startAt)));\n\n        time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true);\n\n        if (immediateRender) {\n          time > 0 && !autoRevert && (tween._startAt = 0);\n\n          if (dur && time <= 0) {\n            time && (tween._zTime = time);\n            return;\n          }\n        } else if (autoRevert === false) {\n          tween._startAt = 0;\n        }\n      } else if (runBackwards && dur) {\n        if (prevStartAt) {\n          !autoRevert && (tween._startAt = 0);\n        } else {\n          time && (immediateRender = false);\n          p = _setDefaults({\n            overwrite: false,\n            data: \"isFromStart\",\n            lazy: immediateRender && _isNotFalse(lazy),\n            immediateRender: immediateRender,\n            stagger: 0,\n            parent: parent\n          }, cleanVars);\n          harnessVars && (p[harness.prop] = harnessVars);\n\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n          time < 0 && tween._startAt.render(-1, true);\n\n          if (!immediateRender) {\n            _initTween(tween._startAt, _tinyNum);\n          } else if (!time) {\n            return;\n          }\n        }\n      }\n\n      tween._pt = 0;\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n      for (i = 0; i < targets.length; i++) {\n        target = targets[i];\n        gsData = target._gsap || _harness(targets)[i]._gsap;\n        tween._ptLookup[i] = ptLookup = {};\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n          plugin._props.forEach(function (name) {\n            ptLookup[name] = pt;\n          });\n\n          plugin.priority && (hasPriority = 1);\n        }\n\n        if (!harness || harnessVars) {\n          for (p in cleanVars) {\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n              plugin.priority && (hasPriority = 1);\n            } else {\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n            }\n          }\n        }\n\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n        if (autoOverwrite && tween._pt) {\n          _overwritingTween = tween;\n\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(0));\n\n          overwritten = !tween.parent;\n          _overwritingTween = 0;\n        }\n\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n      }\n\n      hasPriority && _sortPropTweensByPriority(tween);\n      tween._onInit && tween._onInit(tween);\n    }\n\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\n  },\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n        propertyAliases = harness && harness.aliases,\n        copy,\n        p,\n        i,\n        aliases;\n\n    if (!propertyAliases) {\n      return vars;\n    }\n\n    copy = _merge({}, vars);\n\n    for (p in propertyAliases) {\n      if (p in copy) {\n        aliases = propertyAliases[p].split(\",\");\n        i = aliases.length;\n\n        while (i--) {\n          copy[aliases[i]] = copy[p];\n        }\n      }\n    }\n\n    return copy;\n  },\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n  },\n      _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase\",\n      _staggerPropsToSkip = (_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\").split(\",\");\n\n  var Tween = function (_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n\n    function Tween(targets, vars, position, skipInherit) {\n      var _this3;\n\n      if (typeof vars === \"number\") {\n        position.duration = vars;\n        vars = position;\n        position = null;\n      }\n\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n      var _this3$vars = _this3.vars,\n          duration = _this3$vars.duration,\n          delay = _this3$vars.delay,\n          immediateRender = _this3$vars.immediateRender,\n          stagger = _this3$vars.stagger,\n          overwrite = _this3$vars.overwrite,\n          keyframes = _this3$vars.keyframes,\n          defaults = _this3$vars.defaults,\n          scrollTrigger = _this3$vars.scrollTrigger,\n          yoyoEase = _this3$vars.yoyoEase,\n          parent = vars.parent || _globalTimeline,\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n          tl,\n          i,\n          copy,\n          l,\n          p,\n          curTarget,\n          staggerFunc,\n          staggerVarsToMerge;\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n      _this3._ptLookup = [];\n      _this3._overwrite = overwrite;\n\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n        vars = _this3.vars;\n        tl = _this3.timeline = new Timeline({\n          data: \"nested\",\n          defaults: defaults || {}\n        });\n        tl.kill();\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\n        tl._start = 0;\n\n        if (keyframes) {\n          _setDefaults(tl.vars.defaults, {\n            ease: \"none\"\n          });\n\n          stagger ? parsedTargets.forEach(function (t, i) {\n            return keyframes.forEach(function (frame, j) {\n              return tl.to(t, frame, j ? \">\" : i * stagger);\n            });\n          }) : keyframes.forEach(function (frame) {\n            return tl.to(parsedTargets, frame, \">\");\n          });\n        } else {\n          l = parsedTargets.length;\n          staggerFunc = stagger ? distribute(stagger) : _emptyFunc;\n\n          if (_isObject(stagger)) {\n            for (p in stagger) {\n              if (~_staggerTweenProps.indexOf(p)) {\n                staggerVarsToMerge || (staggerVarsToMerge = {});\n                staggerVarsToMerge[p] = stagger[p];\n              }\n            }\n          }\n\n          for (i = 0; i < l; i++) {\n            copy = {};\n\n            for (p in vars) {\n              if (_staggerPropsToSkip.indexOf(p) < 0) {\n                copy[p] = vars[p];\n              }\n            }\n\n            copy.stagger = 0;\n            yoyoEase && (copy.yoyoEase = yoyoEase);\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n            curTarget = parsedTargets[i];\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n            if (!stagger && l === 1 && copy.delay) {\n              _this3._delay = delay = copy.delay;\n              _this3._start += delay;\n              copy.delay = 0;\n            }\n\n            tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));\n          }\n\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n        }\n\n        duration || _this3.duration(duration = tl.duration());\n      } else {\n        _this3.timeline = 0;\n      }\n\n      if (overwrite === true && !_suppressOverwrites) {\n        _overwritingTween = _assertThisInitialized(_this3);\n\n        _globalTimeline.killTweensOf(parsedTargets);\n\n        _overwritingTween = 0;\n      }\n\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\n\n      vars.reversed && _this3.reverse();\n      vars.paused && _this3.paused(true);\n\n      if (immediateRender || !duration && !keyframes && _this3._start === _round(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n        _this3._tTime = -_tinyNum;\n\n        _this3.render(Math.max(0, -delay));\n      }\n\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n      return _this3;\n    }\n\n    var _proto3 = Tween.prototype;\n\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._tDur,\n          dur = this._dur,\n          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          time,\n          pt,\n          iteration,\n          cycleDuration,\n          prevIteration,\n          isYoyo,\n          ratio,\n          timeline,\n          yoyoEase;\n\n      if (!dur) {\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {\n        time = tTime;\n        timeline = this.timeline;\n\n        if (this._repeat) {\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _round(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          isYoyo = this._yoyo && iteration & 1;\n\n          if (isYoyo) {\n            yoyoEase = this._yEase;\n            time = dur - time;\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n          if (time === prevTime && !force && this._initted) {\n            return this;\n          }\n\n          if (iteration !== prevIteration) {\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n              this._lock = force = 1;\n              this.render(_round(cycleDuration * iteration), true).invalidate()._lock = 0;\n            }\n          }\n        }\n\n        if (!this._initted) {\n          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {\n            this._tTime = 0;\n            return this;\n          }\n\n          if (dur !== this._dur) {\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n\n        if (!this._act && this._ts) {\n          this._act = 1;\n          this._lazy = 0;\n        }\n\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n        if (this._from) {\n          this.ratio = ratio = 1 - ratio;\n        }\n\n        if (time && !prevTime && !suppressEvents) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        pt = this._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n        if (this._onUpdate && !suppressEvents) {\n          totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force);\n\n          _callback(this, \"onUpdate\");\n        }\n\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {\n            _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto3.targets = function targets() {\n      return this._targets;\n    };\n\n    _proto3.invalidate = function invalidate() {\n      this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;\n      this._ptLookup = [];\n      this.timeline && this.timeline.invalidate();\n      return _Animation2.prototype.invalidate.call(this);\n    };\n\n    _proto3.kill = function kill(targets, vars) {\n      if (vars === void 0) {\n        vars = \"all\";\n      }\n\n      if (!targets && (!vars || vars === \"all\")) {\n        this._lazy = this._pt = 0;\n        return this.parent ? _interrupt(this) : this;\n      }\n\n      if (this.timeline) {\n        var tDur = this.timeline.totalDuration();\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n        return this;\n      }\n\n      var parsedTargets = this._targets,\n          killingTargets = targets ? toArray(targets) : parsedTargets,\n          propTweenLookup = this._ptLookup,\n          firstPT = this._pt,\n          overwrittenProps,\n          curLookup,\n          curOverwriteProps,\n          props,\n          p,\n          pt,\n          i;\n\n      if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n        vars === \"all\" && (this._pt = 0);\n        return _interrupt(this);\n      }\n\n      overwrittenProps = this._op = this._op || [];\n\n      if (vars !== \"all\") {\n        if (_isString(vars)) {\n          p = {};\n\n          _forEachName(vars, function (name) {\n            return p[name] = 1;\n          });\n\n          vars = p;\n        }\n\n        vars = _addAliasesToVars(parsedTargets, vars);\n      }\n\n      i = parsedTargets.length;\n\n      while (i--) {\n        if (~killingTargets.indexOf(parsedTargets[i])) {\n          curLookup = propTweenLookup[i];\n\n          if (vars === \"all\") {\n            overwrittenProps[i] = vars;\n            props = curLookup;\n            curOverwriteProps = {};\n          } else {\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n            props = vars;\n          }\n\n          for (p in props) {\n            pt = curLookup && curLookup[p];\n\n            if (pt) {\n              if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n              }\n\n              delete curLookup[p];\n            }\n\n            if (curOverwriteProps !== \"all\") {\n              curOverwriteProps[p] = 1;\n            }\n          }\n        }\n      }\n\n      this._initted && !this._pt && firstPT && _interrupt(this);\n      return this;\n    };\n\n    Tween.to = function to(targets, vars) {\n      return new Tween(targets, vars, arguments[2]);\n    };\n\n    Tween.from = function from(targets, vars) {\n      return _createTweenType(1, arguments);\n    };\n\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n      return new Tween(callback, 0, {\n        immediateRender: false,\n        lazy: false,\n        overwrite: false,\n        delay: delay,\n        onComplete: callback,\n        onReverseComplete: callback,\n        onCompleteParams: params,\n        onReverseCompleteParams: params,\n        callbackScope: scope\n      });\n    };\n\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n      return _createTweenType(2, arguments);\n    };\n\n    Tween.set = function set(targets, vars) {\n      vars.duration = 0;\n      vars.repeatDelay || (vars.repeat = 0);\n      return new Tween(targets, vars);\n    };\n\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n\n    return Tween;\n  }(Animation);\n\n  _setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n  });\n\n  _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n    Tween[name] = function () {\n      var tl = new Timeline(),\n          params = _slice.call(arguments, 0);\n\n      params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n      return tl[name].apply(tl, params);\n    };\n  });\n\n  var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n  },\n      _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n  },\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n  },\n      _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n  },\n      _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n  },\n      _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n  },\n      _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n  },\n      _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt,\n        s = \"\";\n\n    if (!ratio && data.b) {\n      s = data.b;\n    } else if (ratio === 1 && data.e) {\n      s = data.e;\n    } else {\n      while (pt) {\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n        pt = pt._next;\n      }\n\n      s += data.c;\n    }\n\n    data.set(data.t, data.p, s, data);\n  },\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n  },\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt,\n        next;\n\n    while (pt) {\n      next = pt._next;\n      pt.p === property && pt.modifier(modifier, tween, target);\n      pt = next;\n    }\n  },\n      _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt,\n        hasNonDependentRemaining,\n        next;\n\n    while (pt) {\n      next = pt._next;\n\n      if (pt.p === property && !pt.op || pt.op === property) {\n        _removeLinkedListItem(this, pt, \"_pt\");\n      } else if (!pt.dep) {\n        hasNonDependentRemaining = 1;\n      }\n\n      pt = next;\n    }\n\n    return !hasNonDependentRemaining;\n  },\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n  },\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt,\n        next,\n        pt2,\n        first,\n        last;\n\n    while (pt) {\n      next = pt._next;\n      pt2 = first;\n\n      while (pt2 && pt2.pr > pt.pr) {\n        pt2 = pt2._next;\n      }\n\n      if (pt._prev = pt2 ? pt2._prev : last) {\n        pt._prev._next = pt;\n      } else {\n        first = pt;\n      }\n\n      if (pt._next = pt2) {\n        pt2._prev = pt;\n      } else {\n        last = pt;\n      }\n\n      pt = next;\n    }\n\n    parent._pt = first;\n  };\n\n  var PropTween = function () {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n      this.t = target;\n      this.s = start;\n      this.c = change;\n      this.p = prop;\n      this.r = renderer || _renderPlain;\n      this.d = data || this;\n      this.set = setter || _setterPlain;\n      this.pr = priority || 0;\n      this._next = next;\n\n      if (next) {\n        next._prev = this;\n      }\n    }\n\n    var _proto4 = PropTween.prototype;\n\n    _proto4.modifier = function modifier(func, tween, target) {\n      this.mSet = this.mSet || this.set;\n      this.set = _setterWithModifier;\n      this.m = func;\n      this.mt = target;\n      this.tween = tween;\n    };\n\n    return PropTween;\n  }();\n\n  _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n    return _reservedProps[name] = 1;\n  });\n\n  _globals.TweenMax = _globals.TweenLite = Tween;\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\n  _globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n  });\n  _config.stringFilter = _colorStringFilter;\n  var _gsap = {\n    registerPlugin: function registerPlugin() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.forEach(function (config) {\n        return _createPlugin(config);\n      });\n    },\n    timeline: function timeline(vars) {\n      return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n      return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n      _isString(target) && (target = toArray(target)[0]);\n\n      var getter = _getCache(target || {}).get,\n          format = unit ? _passThrough : _numericIfPossible;\n\n      unit === \"native\" && (unit = \"\");\n      return !target ? target : !property ? function (property, unit, uncache) {\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n      target = toArray(target);\n\n      if (target.length > 1) {\n        var setters = target.map(function (t) {\n          return gsap.quickSetter(t, property, unit);\n        }),\n            l = setters.length;\n        return function (value) {\n          var i = l;\n\n          while (i--) {\n            setters[i](value);\n          }\n        };\n      }\n\n      target = target[0] || {};\n\n      var Plugin = _plugins[property],\n          cache = _getCache(target),\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\n          setter = Plugin ? function (value) {\n        var p = new Plugin();\n        _quickTween._pt = 0;\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n        p.render(1, p);\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\n      } : cache.set(target, p);\n\n      return Plugin ? setter : function (value) {\n        return setter(target, p, unit ? value + unit : value, cache, 1);\n      };\n    },\n    isTweening: function isTweening(targets) {\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n      return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n      return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n      var name = _ref3.name,\n          effect = _ref3.effect,\n          plugins = _ref3.plugins,\n          defaults = _ref3.defaults,\n          extendTimeline = _ref3.extendTimeline;\n      (plugins || \"\").split(\",\").forEach(function (pluginName) {\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n      });\n\n      _effects[name] = function (targets, vars, tl) {\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n      };\n\n      if (extendTimeline) {\n        Timeline.prototype[name] = function (targets, vars, position) {\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n        };\n      }\n    },\n    registerEase: function registerEase(name, ease) {\n      _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n      return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      var tl = new Timeline(vars),\n          child,\n          next;\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n      _globalTimeline.remove(tl);\n\n      tl._dp = 0;\n      tl._time = tl._tTime = _globalTimeline._time;\n      child = _globalTimeline._first;\n\n      while (child) {\n        next = child._next;\n\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n          _addToTimeline(tl, child, child._start - child._delay);\n        }\n\n        child = next;\n      }\n\n      _addToTimeline(_globalTimeline, tl, 0);\n\n      return tl;\n    },\n    utils: {\n      wrap: wrap,\n      wrapYoyo: wrapYoyo,\n      distribute: distribute,\n      random: random,\n      snap: snap,\n      normalize: normalize,\n      getUnit: getUnit,\n      clamp: clamp,\n      splitColor: splitColor,\n      toArray: toArray,\n      selector: selector,\n      mapRange: mapRange,\n      pipe: pipe,\n      unitize: unitize,\n      interpolate: interpolate,\n      shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n      PropTween: PropTween,\n      globals: _addGlobal,\n      Tween: Tween,\n      Timeline: Timeline,\n      Animation: Animation,\n      getCache: _getCache,\n      _removeLinkedListItem: _removeLinkedListItem,\n      suppressOverwrites: function suppressOverwrites(value) {\n        return _suppressOverwrites = value;\n      }\n    }\n  };\n\n  _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n    return _gsap[name] = Tween[name];\n  });\n\n  _ticker.add(Timeline.updateRoot);\n\n  _quickTween = _gsap.to({}, {\n    duration: 0\n  });\n\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n      pt = pt._next;\n    }\n\n    return pt;\n  },\n      _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets,\n        p,\n        i,\n        pt;\n\n    for (p in modifiers) {\n      i = targets.length;\n\n      while (i--) {\n        pt = tween._ptLookup[i][p];\n\n        if (pt && (pt = pt.d)) {\n          if (pt._pt) {\n            pt = _getPluginPropTween(pt, p);\n          }\n\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n        }\n      }\n    }\n  },\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n      name: name,\n      rawVars: 1,\n      init: function init(target, vars, tween) {\n        tween._onInit = function (tween) {\n          var temp, p;\n\n          if (_isString(vars)) {\n            temp = {};\n\n            _forEachName(vars, function (name) {\n              return temp[name] = 1;\n            });\n\n            vars = temp;\n          }\n\n          if (modifier) {\n            temp = {};\n\n            for (p in vars) {\n              temp[p] = modifier(vars[p]);\n            }\n\n            vars = temp;\n          }\n\n          _addModifiers(tween, vars);\n        };\n      }\n    };\n  };\n\n  var gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n      var p, pt;\n\n      for (p in vars) {\n        pt = this.add(target, \"setAttribute\", (target.getAttribute(p) || 0) + \"\", vars[p], index, targets, 0, 0, p);\n        pt && (pt.op = p);\n\n        this._props.push(p);\n      }\n    }\n  }, {\n    name: \"endArray\",\n    init: function init(target, value) {\n      var i = value.length;\n\n      while (i--) {\n        this.add(target, i, target[i] || 0, value[i]);\n      }\n    }\n  }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n  Tween.version = Timeline.version = gsap.version = \"3.7.1\";\n  _coreReady = 1;\n  _windowExists() && _wake();\n  var Power0 = _easeMap.Power0,\n      Power1 = _easeMap.Power1,\n      Power2 = _easeMap.Power2,\n      Power3 = _easeMap.Power3,\n      Power4 = _easeMap.Power4,\n      Linear = _easeMap.Linear,\n      Quad = _easeMap.Quad,\n      Cubic = _easeMap.Cubic,\n      Quart = _easeMap.Quart,\n      Quint = _easeMap.Quint,\n      Strong = _easeMap.Strong,\n      Elastic = _easeMap.Elastic,\n      Back = _easeMap.Back,\n      SteppedEase = _easeMap.SteppedEase,\n      Bounce = _easeMap.Bounce,\n      Sine = _easeMap.Sine,\n      Expo = _easeMap.Expo,\n      Circ = _easeMap.Circ;\n\n  var _win$1,\n      _doc$1,\n      _docElement,\n      _pluginInitted,\n      _tempDiv,\n      _tempDivStyler,\n      _recentSetterPlugin,\n      _windowExists$1 = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _transformProps = {},\n      _RAD2DEG = 180 / Math.PI,\n      _DEG2RAD = Math.PI / 180,\n      _atan2 = Math.atan2,\n      _bigNum$1 = 1e8,\n      _capsExp = /([A-Z])/g,\n      _horizontalExp = /(?:left|right|width|margin|padding|x)/i,\n      _complexExp = /[\\s,\\(]\\S/,\n      _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n  },\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n  },\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n  },\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n  },\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n  },\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n  },\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n  },\n      _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n  },\n      _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n  },\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _transformProp = \"transform\",\n      _transformOriginProp = _transformProp + \"Origin\",\n      _supports3D,\n      _createElement = function _createElement(type, ns) {\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n    return e.style ? e : _doc$1.createElement(type);\n  },\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n  },\n      _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv,\n        s = e.style,\n        i = 5;\n\n    if (property in s && !preferPrefix) {\n      return property;\n    }\n\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n\n    while (i-- && !(_prefixes[i] + property in s)) {}\n\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n  },\n      _initCore = function _initCore() {\n    if (_windowExists$1() && window.document) {\n      _win$1 = window;\n      _doc$1 = _win$1.document;\n      _docElement = _doc$1.documentElement;\n      _tempDiv = _createElement(\"div\") || {\n        style: {}\n      };\n      _tempDivStyler = _createElement(\"div\");\n      _transformProp = _checkPropPrefix(_transformProp);\n      _transformOriginProp = _transformProp + \"Origin\";\n      _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n      _supports3D = !!_checkPropPrefix(\"perspective\");\n      _pluginInitted = 1;\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n\n    _docElement.appendChild(svg);\n\n    svg.appendChild(this);\n    this.style.display = \"block\";\n\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._gsapBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._gsapBBox) {\n      bbox = this._gsapBBox();\n    }\n\n    if (oldParent) {\n      if (oldSibling) {\n        oldParent.insertBefore(this, oldSibling);\n      } else {\n        oldParent.appendChild(this);\n      }\n    }\n\n    _docElement.removeChild(svg);\n\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n\n    while (i--) {\n      if (target.hasAttribute(attributesArray[i])) {\n        return target.getAttribute(attributesArray[i]);\n      }\n    }\n  },\n      _getBBox = function _getBBox(target) {\n    var bounds;\n\n    try {\n      bounds = target.getBBox();\n    } catch (error) {\n      bounds = _getBBoxHack.call(target, true);\n    }\n\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n      x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n      y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n      width: 0,\n      height: 0\n    } : bounds;\n  },\n      _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _removeProperty = function _removeProperty(target, property) {\n    if (property) {\n      var style = target.style;\n\n      if (property in _transformProps && property !== _transformOriginProp) {\n        property = _transformProp;\n      }\n\n      if (style.removeProperty) {\n        if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n          property = \"-\" + property;\n        }\n\n        style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n      } else {\n        style.removeAttribute(property);\n      }\n    }\n  },\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n  },\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0,\n        curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n        style = _tempDiv.style,\n        horizontal = _horizontalExp.test(property),\n        isRootSVG = target.tagName.toLowerCase() === \"svg\",\n        measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n        amount = 100,\n        toPixels = unit === \"px\",\n        toPercent = unit === \"%\",\n        px,\n        parent,\n        cache,\n        isSVG;\n\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n      return curValue;\n    }\n\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n      px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n    if (isSVG) {\n      parent = (target.ownerSVGElement || {}).parentNode;\n    }\n\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\n      parent = _doc$1.body;\n    }\n\n    cache = parent._gsap;\n\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {\n      return _round(curValue / cache.width * amount);\n    } else {\n      (toPercent || curUnit === \"%\") && (style.position = _getComputedProperty(target, \"position\"));\n      parent === target && (style.position = \"static\");\n      parent.appendChild(_tempDiv);\n      px = _tempDiv[measureProperty];\n      parent.removeChild(_tempDiv);\n      style.position = \"absolute\";\n\n      if (horizontal && toPercent) {\n        cache = _getCache(parent);\n        cache.time = _ticker.time;\n        cache.width = parent[measureProperty];\n      }\n    }\n\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n  },\n      _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n\n    if (property in _propertyAliases && property !== \"transform\") {\n      property = _propertyAliases[property];\n\n      if (~property.indexOf(\",\")) {\n        property = property.split(\",\")[0];\n      }\n    }\n\n    if (_transformProps[property] && property !== \"transform\") {\n      value = _parseTransform(target, uncache);\n      value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n      value = target.style[property];\n\n      if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n      }\n    }\n\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n  },\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    if (!start || start === \"none\") {\n      var p = _checkPropPrefix(prop, target, 1),\n          s = p && _getComputedProperty(target, p, 1);\n\n      if (s && s !== start) {\n        prop = p;\n        start = s;\n      } else if (prop === \"borderColor\") {\n        start = _getComputedProperty(target, \"borderTopColor\");\n      }\n    }\n\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n        index = 0,\n        matchIndex = 0,\n        a,\n        result,\n        startValues,\n        startNum,\n        color,\n        startValue,\n        endValue,\n        endNum,\n        chunk,\n        endUnit,\n        startUnit,\n        relative,\n        endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (end === \"auto\") {\n      target.style[prop] = end;\n      end = _getComputedProperty(target, prop) || end;\n      target.style[prop] = start;\n    }\n\n    a = [start, end];\n\n    _colorStringFilter(a);\n\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_numWithUnitExp) || [];\n    endValues = end.match(_numWithUnitExp) || [];\n\n    if (endValues.length) {\n      while (result = _numWithUnitExp.exec(end)) {\n        endValue = result[0];\n        chunk = end.substring(index, result.index);\n\n        if (color) {\n          color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n          color = 1;\n        }\n\n        if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n          startNum = parseFloat(startValue) || 0;\n          startUnit = startValue.substr((startNum + \"\").length);\n          relative = endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0;\n\n          if (relative) {\n            endValue = endValue.substr(2);\n          }\n\n          endNum = parseFloat(endValue);\n          endUnit = endValue.substr((endNum + \"\").length);\n          index = _numWithUnitExp.lastIndex - endUnit.length;\n\n          if (!endUnit) {\n            endUnit = endUnit || _config.units[prop] || startUnit;\n\n            if (index === end.length) {\n              end += endUnit;\n              pt.e += endUnit;\n            }\n          }\n\n          if (startUnit !== endUnit) {\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n          }\n\n          pt._pt = {\n            _next: pt._pt,\n            p: chunk || matchIndex === 1 ? chunk : \",\",\n            s: startNum,\n            c: relative ? relative * endNum : endNum - startNum,\n            m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n          };\n        }\n      }\n\n      pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    } else {\n      pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n\n    _relExp.test(end) && (pt.e = 0);\n    this._pt = pt;\n    return pt;\n  },\n      _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n  },\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"),\n        x = split[0],\n        y = split[1] || \"50%\";\n\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n      value = x;\n      x = y;\n      y = value;\n    }\n\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n  },\n      _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n      var target = data.t,\n          style = target.style,\n          props = data.u,\n          cache = target._gsap,\n          prop,\n          clearTransforms,\n          i;\n\n      if (props === \"all\" || props === true) {\n        style.cssText = \"\";\n        clearTransforms = 1;\n      } else {\n        props = props.split(\",\");\n        i = props.length;\n\n        while (--i > -1) {\n          prop = props[i];\n\n          if (_transformProps[prop]) {\n            clearTransforms = 1;\n            prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n          }\n\n          _removeProperty(target, prop);\n        }\n      }\n\n      if (clearTransforms) {\n        _removeProperty(target, _transformProp);\n\n        if (cache) {\n          cache.svg && target.removeAttribute(\"transform\");\n\n          _parseTransform(target, 1);\n\n          cache.uncache = 1;\n        }\n      }\n    }\n  },\n      _specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n      if (tween.data !== \"isFromStart\") {\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n        pt.u = endValue;\n        pt.pr = -10;\n        pt.tween = tween;\n\n        plugin._props.push(property);\n\n        return 1;\n      }\n    }\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _rotationalProperties = {},\n      _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n  },\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n  },\n      _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || _getCache(target),\n        style = target.style,\n        matrix = _getComputedTransformMatrixAsArray(target),\n        parent,\n        nextSibling,\n        temp,\n        addedToDOM;\n\n    if (cache.svg && target.getAttribute(\"transform\")) {\n      temp = target.transform.baseVal.consolidate().matrix;\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n      return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n      temp = style.display;\n      style.display = \"block\";\n      parent = target.parentNode;\n\n      if (!parent || !target.offsetParent) {\n        addedToDOM = 1;\n        nextSibling = target.nextSibling;\n\n        _docElement.appendChild(target);\n      }\n\n      matrix = _getComputedTransformMatrixAsArray(target);\n      temp ? style.display = temp : _removeProperty(target, \"display\");\n\n      if (addedToDOM) {\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n      }\n    }\n\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n  },\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap,\n        matrix = matrixArray || _getMatrix(target, true),\n        xOriginOld = cache.xOrigin || 0,\n        yOriginOld = cache.yOrigin || 0,\n        xOffsetOld = cache.xOffset || 0,\n        yOffsetOld = cache.yOffset || 0,\n        a = matrix[0],\n        b = matrix[1],\n        c = matrix[2],\n        d = matrix[3],\n        tx = matrix[4],\n        ty = matrix[5],\n        originSplit = origin.split(\" \"),\n        xOrigin = parseFloat(originSplit[0]) || 0,\n        yOrigin = parseFloat(originSplit[1]) || 0,\n        bounds,\n        determinant,\n        x,\n        y;\n\n    if (!originIsAbsolute) {\n      bounds = _getBBox(target);\n      xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n      xOrigin = x;\n      yOrigin = y;\n    }\n\n    if (smooth || smooth !== false && cache.smooth) {\n      tx = xOrigin - xOriginOld;\n      ty = yOrigin - yOriginOld;\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n      cache.xOffset = cache.yOffset = 0;\n    }\n\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\";\n\n    if (pluginToAddPropTweensTo) {\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n  },\n      _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new GSCache(target);\n\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n      return cache;\n    }\n\n    var style = target.style,\n        invertedScaleX = cache.scaleX < 0,\n        px = \"px\",\n        deg = \"deg\",\n        origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        rotation,\n        rotationX,\n        rotationY,\n        skewX,\n        skewY,\n        perspective,\n        xOrigin,\n        yOrigin,\n        matrix,\n        angle,\n        cos,\n        sin,\n        a,\n        b,\n        c,\n        d,\n        a12,\n        a22,\n        t1,\n        t2,\n        t3,\n        a13,\n        a23,\n        a33,\n        a42,\n        a43,\n        a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n    matrix = _getMatrix(target, cache.svg);\n\n    if (cache.svg) {\n      t1 = (!cache.uncache || origin === \"0px 0px\") && !uncache && target.getAttribute(\"data-svg-origin\");\n\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n\n    if (matrix !== _identity2DMatrix) {\n      a = matrix[0];\n      b = matrix[1];\n      c = matrix[2];\n      d = matrix[3];\n      x = a12 = matrix[4];\n      y = a22 = matrix[5];\n\n      if (matrix.length === 6) {\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n        if (cache.svg) {\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\n        }\n      } else {\n        a32 = matrix[6];\n        a42 = matrix[7];\n        a13 = matrix[8];\n        a23 = matrix[9];\n        a33 = matrix[10];\n        a43 = matrix[11];\n        x = matrix[12];\n        y = matrix[13];\n        z = matrix[14];\n        angle = _atan2(a32, a33);\n        rotationX = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n\n        angle = _atan2(-c, a33);\n        rotationY = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a * cos - a13 * sin;\n          t2 = b * cos - a23 * sin;\n          t3 = c * cos - a33 * sin;\n          a43 = d * sin + a43 * cos;\n          a = t1;\n          b = t2;\n          c = t3;\n        }\n\n        angle = _atan2(b, a);\n        rotation = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a * cos + b * sin;\n          t2 = a12 * cos + a22 * sin;\n          b = b * cos - a * sin;\n          a22 = a22 * cos - a12 * sin;\n          a = t1;\n          a12 = t2;\n        }\n\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n          rotationX = rotation = 0;\n          rotationY = 180 - rotationY;\n        }\n\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n        angle = _atan2(a12, a22);\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n      }\n\n      if (cache.svg) {\n        t1 = target.getAttribute(\"transform\");\n        cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n        t1 && target.setAttribute(\"transform\", t1);\n      }\n    }\n\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n      if (invertedScaleX) {\n        scaleX *= -1;\n        skewX += rotation <= 0 ? 180 : -180;\n        rotation += rotation <= 0 ? 180 : -180;\n      } else {\n        scaleY *= -1;\n        skewX += skewX <= 0 ? 180 : -180;\n      }\n    }\n\n    cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = _round(scaleX);\n    cache.scaleY = _round(scaleY);\n    cache.rotation = _round(rotation) + deg;\n    cache.rotationX = _round(rotationX) + deg;\n    cache.rotationY = _round(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n      style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n  },\n      _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n  },\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = getUnit(start);\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n  },\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n\n    _renderCSSTransforms(ratio, cache);\n  },\n      _zeroDeg = \"0deg\",\n      _zeroPx = \"0px\",\n      _endParenthesis = \") \",\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this,\n        xPercent = _ref.xPercent,\n        yPercent = _ref.yPercent,\n        x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        rotation = _ref.rotation,\n        rotationY = _ref.rotationY,\n        rotationX = _ref.rotationX,\n        skewX = _ref.skewX,\n        skewY = _ref.skewY,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        transformPerspective = _ref.transformPerspective,\n        force3D = _ref.force3D,\n        target = _ref.target,\n        zOrigin = _ref.zOrigin,\n        transforms = \"\",\n        use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n      var angle = parseFloat(rotationY) * _DEG2RAD,\n          a13 = Math.sin(angle),\n          a33 = Math.cos(angle),\n          cos;\n\n      angle = parseFloat(rotationX) * _DEG2RAD;\n      cos = Math.cos(angle);\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n\n    if (transformPerspective !== _zeroPx) {\n      transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n\n    if (xPercent || yPercent) {\n      transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n      transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n\n    if (rotation !== _zeroDeg) {\n      transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n\n    if (rotationY !== _zeroDeg) {\n      transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n\n    if (rotationX !== _zeroDeg) {\n      transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n      transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n\n    if (scaleX !== 1 || scaleY !== 1) {\n      transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n  },\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this,\n        xPercent = _ref2.xPercent,\n        yPercent = _ref2.yPercent,\n        x = _ref2.x,\n        y = _ref2.y,\n        rotation = _ref2.rotation,\n        skewX = _ref2.skewX,\n        skewY = _ref2.skewY,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        target = _ref2.target,\n        xOrigin = _ref2.xOrigin,\n        yOrigin = _ref2.yOrigin,\n        xOffset = _ref2.xOffset,\n        yOffset = _ref2.yOffset,\n        forceCSS = _ref2.forceCSS,\n        tx = parseFloat(x),\n        ty = parseFloat(y),\n        a11,\n        a21,\n        a12,\n        a22,\n        temp;\n\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n\n    if (skewY) {\n      skewY = parseFloat(skewY);\n      skewX += skewY;\n      rotation += skewY;\n    }\n\n    if (rotation || skewX) {\n      rotation *= _DEG2RAD;\n      skewX *= _DEG2RAD;\n      a11 = Math.cos(rotation) * scaleX;\n      a21 = Math.sin(rotation) * scaleX;\n      a12 = Math.sin(rotation - skewX) * -scaleY;\n      a22 = Math.cos(rotation - skewX) * scaleY;\n\n      if (skewX) {\n        skewY *= _DEG2RAD;\n        temp = Math.tan(skewX - skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a12 *= temp;\n        a22 *= temp;\n\n        if (skewY) {\n          temp = Math.tan(skewY);\n          temp = Math.sqrt(1 + temp * temp);\n          a11 *= temp;\n          a21 *= temp;\n        }\n      }\n\n      a11 = _round(a11);\n      a21 = _round(a21);\n      a12 = _round(a12);\n      a22 = _round(a22);\n    } else {\n      a11 = scaleX;\n      a22 = scaleY;\n      a21 = a12 = 0;\n    }\n\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n      tx = _convertToUnit(target, \"x\", x, \"px\");\n      ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n\n    if (xPercent || yPercent) {\n      temp = target.getBBox();\n      tx = _round(tx + xPercent / 100 * temp.width);\n      ty = _round(ty + yPercent / 100 * temp.height);\n    }\n\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp);\n  },\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {\n    var cap = 360,\n        isString = _isString(endValue),\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n        change = relative ? endNum * relative : endNum - startNum,\n        finalValue = startNum + change + \"deg\",\n        direction,\n        pt;\n\n    if (isString) {\n      direction = endValue.split(\"_\")[1];\n\n      if (direction === \"short\") {\n        change %= cap;\n\n        if (change !== change % (cap / 2)) {\n          change += change < 0 ? cap : -cap;\n        }\n      }\n\n      if (direction === \"cw\" && change < 0) {\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      } else if (direction === \"ccw\" && change > 0) {\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      }\n    }\n\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _assign = function _assign(target, source) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n\n    return target;\n  },\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    var startCache = _assign({}, target._gsap),\n        exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n        style = target.style,\n        endCache,\n        p,\n        startValue,\n        endValue,\n        startNum,\n        endNum,\n        startUnit,\n        endUnit;\n\n    if (startCache.svg) {\n      startValue = target.getAttribute(\"transform\");\n      target.setAttribute(\"transform\", \"\");\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n\n      _removeProperty(target, _transformProp);\n\n      target.setAttribute(\"transform\", startValue);\n    } else {\n      startValue = getComputedStyle(target)[_transformProp];\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n      style[_transformProp] = startValue;\n    }\n\n    for (p in _transformProps) {\n      startValue = startCache[p];\n      endValue = endCache[p];\n\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n        endNum = parseFloat(endValue);\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n        plugin._pt.u = endUnit || 0;\n\n        plugin._props.push(p);\n      }\n    }\n\n    _assign(endCache, startCache);\n  };\n\n  _forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n    var t = \"Top\",\n        r = \"Right\",\n        b = \"Bottom\",\n        l = \"Left\",\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n      return index < 2 ? name + side : \"border\" + side + name;\n    });\n\n    _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n      var a, vars;\n\n      if (arguments.length < 4) {\n        a = props.map(function (prop) {\n          return _get(plugin, prop, property);\n        });\n        vars = a.join(\" \");\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\n      }\n\n      a = (endValue + \"\").split(\" \");\n      vars = {};\n      props.forEach(function (prop, i) {\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n      });\n      plugin.init(target, vars, tween);\n    };\n  });\n\n  var CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n      return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n      var props = this._props,\n          style = target.style,\n          startAt = tween.vars.startAt,\n          startValue,\n          endValue,\n          endNum,\n          startNum,\n          type,\n          specialProp,\n          p,\n          startUnit,\n          endUnit,\n          relative,\n          isTransformRelated,\n          transformPropTween,\n          cache,\n          smooth,\n          hasPriority;\n      _pluginInitted || _initCore();\n\n      for (p in vars) {\n        if (p === \"autoRound\") {\n          continue;\n        }\n\n        endValue = vars[p];\n\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n          continue;\n        }\n\n        type = typeof endValue;\n        specialProp = _specialProps[p];\n\n        if (type === \"function\") {\n          endValue = endValue.call(tween, index, target, targets);\n          type = typeof endValue;\n        }\n\n        if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n          endValue = _replaceRandom(endValue);\n        }\n\n        if (specialProp) {\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n        } else if (p.substr(0, 2) === \"--\") {\n          startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n          endValue += \"\";\n          _colorExp.lastIndex = 0;\n\n          if (!_colorExp.test(startValue)) {\n            startUnit = getUnit(startValue);\n            endUnit = getUnit(endValue);\n          }\n\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n          this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n          props.push(p);\n        } else if (type !== \"undefined\") {\n          if (startAt && p in startAt) {\n            startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n            p in _config.units && !getUnit(startValue) && (startValue += _config.units[p]);\n            (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n          } else {\n            startValue = _get(target, p);\n          }\n\n          startNum = parseFloat(startValue);\n          relative = type === \"string\" && endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0;\n          relative && (endValue = endValue.substr(2));\n          endNum = parseFloat(endValue);\n\n          if (p in _propertyAliases) {\n            if (p === \"autoAlpha\") {\n              if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                startNum = 0;\n              }\n\n              _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n            }\n\n            if (p !== \"scale\" && p !== \"transform\") {\n              p = _propertyAliases[p];\n              ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n            }\n          }\n\n          isTransformRelated = p in _transformProps;\n\n          if (isTransformRelated) {\n            if (!transformPropTween) {\n              cache = target._gsap;\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n              smooth = vars.smoothOrigin !== false && cache.smooth;\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n              transformPropTween.dep = 1;\n            }\n\n            if (p === \"scale\") {\n              this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? relative * endNum : endNum - cache.scaleY) || 0);\n              props.push(\"scaleY\", p);\n              p += \"X\";\n            } else if (p === \"transformOrigin\") {\n              endValue = _convertKeywordsToPercentages(endValue);\n\n              if (cache.svg) {\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n              } else {\n                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n              }\n\n              continue;\n            } else if (p === \"svgOrigin\") {\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n              continue;\n            } else if (p in _rotationalProperties) {\n              _addRotationalPropTween(this, cache, p, startNum, endValue, relative);\n\n              continue;\n            } else if (p === \"smoothOrigin\") {\n              _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n              continue;\n            } else if (p === \"force3D\") {\n              cache[p] = endValue;\n              continue;\n            } else if (p === \"transform\") {\n              _addRawTransformPTs(this, endValue, target);\n\n              continue;\n            }\n          } else if (!(p in style)) {\n            p = _checkPropPrefix(p) || p;\n          }\n\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n            startUnit = (startValue + \"\").substr((startNum + \"\").length);\n            endNum || (endNum = 0);\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n            this._pt.u = endUnit || 0;\n\n            if (startUnit !== endUnit) {\n              this._pt.b = startValue;\n              this._pt.r = _renderCSSPropWithBeginning;\n            }\n          } else if (!(p in style)) {\n            if (p in target) {\n              this.add(target, p, startValue || target[p], endValue, index, targets);\n            } else {\n              _missingPlugin(p, endValue);\n\n              continue;\n            }\n          } else {\n            _tweenComplexCSSString.call(this, target, p, startValue, endValue);\n          }\n\n          props.push(p);\n        }\n      }\n\n      hasPriority && _sortPropTweensByPriority(this);\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n      var p = _propertyAliases[property];\n      p && p.indexOf(\",\") < 0 && (property = p);\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n    },\n    core: {\n      _removeProperty: _removeProperty,\n      _getMatrix: _getMatrix\n    }\n  };\n  gsap.utils.checkPrefix = _checkPropPrefix;\n\n  (function (positionAndScale, rotation, others, aliases) {\n    var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n      _transformProps[name] = 1;\n    });\n\n    _forEachName(rotation, function (name) {\n      _config.units[name] = \"deg\";\n      _rotationalProperties[name] = 1;\n    });\n\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n    _forEachName(aliases, function (name) {\n      var split = name.split(\":\");\n      _propertyAliases[split[1]] = all[split[0]];\n    });\n  })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n  _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n    _config.units[name] = \"px\";\n  });\n\n  gsap.registerPlugin(CSSPlugin);\n\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n  exports.Back = Back;\n  exports.Bounce = Bounce;\n  exports.CSSPlugin = CSSPlugin;\n  exports.Circ = Circ;\n  exports.Cubic = Cubic;\n  exports.Elastic = Elastic;\n  exports.Expo = Expo;\n  exports.Linear = Linear;\n  exports.Power0 = Power0;\n  exports.Power1 = Power1;\n  exports.Power2 = Power2;\n  exports.Power3 = Power3;\n  exports.Power4 = Power4;\n  exports.Quad = Quad;\n  exports.Quart = Quart;\n  exports.Quint = Quint;\n  exports.Sine = Sine;\n  exports.SteppedEase = SteppedEase;\n  exports.Strong = Strong;\n  exports.TimelineLite = Timeline;\n  exports.TimelineMax = Timeline;\n  exports.TweenLite = Tween;\n  exports.TweenMax = TweenMaxWithCSS;\n  exports.default = gsapWithCSS;\n  exports.gsap = gsapWithCSS;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '132';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tclass EventDispatcher {\n\t\taddEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t}\n\n\t\thasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t}\n\n\t\tremoveEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tlet _seed = 1234567;\n\tconst DEG2RAD = Math.PI / 180;\n\tconst RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tfunction generateUUID() {\n\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\treturn uuid.toUpperCase();\n\t}\n\n\tfunction clamp(value, min, max) {\n\t\treturn Math.max(min, Math.min(max, value));\n\t} // compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\n\tfunction euclideanModulo(n, m) {\n\t\treturn (n % m + m) % m;\n\t} // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n\tfunction mapLinear(x, a1, a2, b1, b2) {\n\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n\tfunction inverseLerp(x, y, value) {\n\t\tif (x !== y) {\n\t\t\treturn (value - x) / (y - x);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n\tfunction lerp(x, y, t) {\n\t\treturn (1 - t) * x + t * y;\n\t} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n\tfunction damp(x, y, lambda, dt) {\n\t\treturn lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t} // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n\tfunction pingpong(x, length = 1) {\n\t\treturn length - Math.abs(euclideanModulo(x, length * 2) - length);\n\t} // http://en.wikipedia.org/wiki/Smoothstep\n\n\n\tfunction smoothstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * (3 - 2 * x);\n\t}\n\n\tfunction smootherstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t} // Random integer from <low, high> interval\n\n\n\tfunction randInt(low, high) {\n\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t} // Random float from <low, high> interval\n\n\n\tfunction randFloat(low, high) {\n\t\treturn low + Math.random() * (high - low);\n\t} // Random float from <-range/2, range/2> interval\n\n\n\tfunction randFloatSpread(range) {\n\t\treturn range * (0.5 - Math.random());\n\t} // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n\tfunction seededRandom(s) {\n\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t_seed = _seed * 16807 % 2147483647;\n\t\treturn (_seed - 1) / 2147483646;\n\t}\n\n\tfunction degToRad(degrees) {\n\t\treturn degrees * DEG2RAD;\n\t}\n\n\tfunction radToDeg(radians) {\n\t\treturn radians * RAD2DEG;\n\t}\n\n\tfunction isPowerOfTwo(value) {\n\t\treturn (value & value - 1) === 0 && value !== 0;\n\t}\n\n\tfunction ceilPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction floorPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t// angles are in radians\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\t\tconst c2 = cos(b / 2);\n\t\tconst s2 = sin(b / 2);\n\t\tconst c13 = cos((a + c) / 2);\n\t\tconst s13 = sin((a + c) / 2);\n\t\tconst c1_3 = cos((a - c) / 2);\n\t\tconst s1_3 = sin((a - c) / 2);\n\t\tconst c3_1 = cos((c - a) / 2);\n\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\tswitch (order) {\n\t\t\tcase 'XYX':\n\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZY':\n\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXZ':\n\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZX':\n\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXY':\n\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYZ':\n\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t}\n\t}\n\n\tvar MathUtils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDEG2RAD: DEG2RAD,\n\t\tRAD2DEG: RAD2DEG,\n\t\tgenerateUUID: generateUUID,\n\t\tclamp: clamp,\n\t\teuclideanModulo: euclideanModulo,\n\t\tmapLinear: mapLinear,\n\t\tinverseLerp: inverseLerp,\n\t\tlerp: lerp,\n\t\tdamp: damp,\n\t\tpingpong: pingpong,\n\t\tsmoothstep: smoothstep,\n\t\tsmootherstep: smootherstep,\n\t\trandInt: randInt,\n\t\trandFloat: randFloat,\n\t\trandFloatSpread: randFloatSpread,\n\t\tseededRandom: seededRandom,\n\t\tdegToRad: degToRad,\n\t\tradToDeg: radToDeg,\n\t\tisPowerOfTwo: isPowerOfTwo,\n\t\tceilPowerOfTwo: ceilPowerOfTwo,\n\t\tfloorPowerOfTwo: floorPowerOfTwo,\n\t\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n\t});\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tlet _canvas;\n\n\tclass ImageUtils {\n\t\tstatic getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t\tthis.isRenderTargetTexture = false;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options = {}) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.isRenderTargetTexture = true;\n\t\t\tthis.texture.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: 1\n\t\t\t};\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.texture.image = { ...this.texture.image\n\t\t\t}; // See #20328.\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\t\tconstructor(width, height, count) {\n\t\t\tsuper(width, height);\n\t\t\tconst texture = this.texture;\n\t\t\tthis.texture = [];\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tthis.texture[i] = texture.clone();\n\t\t\t}\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\n\t\t\t\tfor (let i = 0, il = this.texture.length; i < il; i++) {\n\t\t\t\t\tthis.texture[i].image.width = width;\n\t\t\t\t\tthis.texture[i].image.height = height;\n\t\t\t\t\tthis.texture[i].image.depth = depth;\n\t\t\t\t}\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.dispose();\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.set(0, 0, this.width, this.height);\n\t\t\tthis.scissor.set(0, 0, this.width, this.height);\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\tthis.texture.length = 0;\n\n\t\t\tfor (let i = 0, il = source.texture.length; i < il; i++) {\n\t\t\t\tthis.texture[i] = source.texture[i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(xy, xz, yx, yz, zx, zy) {\n\t\t\tthis.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order = this._order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order = this._order, update = true) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update === true) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order = this._order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = /*@__PURE__*/new Vector3();\n\n\tconst _q1 = /*@__PURE__*/new Quaternion();\n\n\tconst _m1$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _target = /*@__PURE__*/new Vector3();\n\n\tconst _position$3 = /*@__PURE__*/new Vector3();\n\n\tconst _scale$2 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n\tconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n\tconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n\tconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tclass Object3D extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _object3DId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\t\tconst position = new Vector3();\n\t\t\tconst rotation = new Euler();\n\t\t\tconst quaternion = new Quaternion();\n\t\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\t\tfunction onRotationChange() {\n\t\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t\t}\n\n\t\t\tfunction onQuaternionChange() {\n\t\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t\t}\n\n\t\t\trotation._onChange(onRotationChange);\n\n\t\t\tquaternion._onChange(onQuaternionChange);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tposition: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\t\tthis.animations = [];\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tonBeforeRender() {}\n\n\t\tonAfterRender() {}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t}\n\n\t\tsetRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t}\n\n\t\tsetRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t}\n\n\t\tsetRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t}\n\n\t\trotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t}\n\n\t\ttranslateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t}\n\n\t\ttranslateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t}\n\n\t\ttranslateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t}\n\n\t\tlocalToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t}\n\n\t\tworldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t}\n\n\t\tlookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t}\n\n\t\tadd(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremoveFromParent() {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tparent.remove(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tattach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t}\n\n\t\tgetObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t}\n\n\t\tgetObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tgetWorldPosition(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t}\n\n\t\tgetWorldQuaternion(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldScale(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t}\n\n\t\traycast() {}\n\n\t\ttraverse(callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseAncestors(callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isScene) {\n\t\t\t\tif (this.background) {\n\t\t\t\t\tif (this.background.isColor) {\n\t\t\t\t\t\tobject.background = this.background.toJSON();\n\t\t\t\t\t} else if (this.background.isTexture) {\n\t\t\t\t\t\tobject.background = this.background.toJSON(meta).uuid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.environment && this.environment.isTexture) {\n\t\t\t\t\tobject.environment = this.environment.toJSON(meta).uuid;\n\t\t\t\t}\n\t\t\t} else if (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tclone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t}\n\n\t\tcopy(source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype.isObject3D = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tclass Material extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: materialId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\t\tthis.fog = true;\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.vertexColors = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.format = RGBAFormat;\n\t\t\tthis.transparent = false;\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\t\tthis.stencilWriteMask = 0xff;\n\t\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\t\tthis.stencilRef = 0;\n\t\t\tthis.stencilFuncMask = 0xff;\n\t\t\tthis.stencilFail = KeepStencilOp;\n\t\t\tthis.stencilZFail = KeepStencilOp;\n\t\t\tthis.stencilZPass = KeepStencilOp;\n\t\t\tthis.stencilWrite = false;\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\t\tthis.shadowSide = null;\n\t\t\tthis.colorWrite = true;\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\t\tthis.dithering = false;\n\t\t\tthis.alphaToCoverage = false;\n\t\t\tthis.premultipliedAlpha = false;\n\t\t\tthis.visible = true;\n\t\t\tthis.toneMapped = true;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t\tthis._alphaTest = 0;\n\t\t}\n\n\t\tget alphaTest() {\n\t\t\treturn this._alphaTest;\n\t\t}\n\n\t\tset alphaTest(value) {\n\t\t\tif (this._alphaTest > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._alphaTest = value;\n\t\t}\n\n\t\tonBuild() {}\n\n\t\tonBeforeCompile() {}\n\n\t\tcustomProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t}\n\n\t\tsetValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheenTint && this.sheenTint.isColor) data.sheenTint = this.sheenTint.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n\t\t\tif (this.specularTint && this.specularTint.isColor) data.specularTint = this.specularTint.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\t\t\tif (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n\t\t\tif (this.specularTintMap && this.specularTintMap.isTexture) data.specularTintMap = this.specularTintMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t}\n\n\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\tif (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n\t\t\tif (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.transmission !== undefined) data.transmission = this.transmission;\n\t\t\tif (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n\t\t\tif (this.thickness !== undefined) data.thickness = this.thickness;\n\t\t\tif (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n\t\t\tif (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n\t\t\tif (this.attenuationTint !== undefined) data.attenuationTint = this.attenuationTint.getHex();\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.format !== RGBAFormat) data.format = this.format;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.format = source.format;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tMaterial.prototype.isMaterial = true;\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = euclideanModulo(h, 1);\n\t\t\ts = clamp(s, 0, 1);\n\t\t\tl = clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style.toLowerCase()];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector2();\n\n\tclass BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tif (Array.isArray(array)) {\n\t\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t\t}\n\n\t\t\tthis.name = '';\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyColorsArray(colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector2sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector3sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector4sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tBufferAttribute.prototype.isBufferAttribute = true; //\n\n\tclass Int8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8ClampedArray(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tclass Float32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float64BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float64Array(array), itemSize, normalized);\n\t\t}\n\n\t} //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tlet _id = 0;\n\n\tconst _m1 = /*@__PURE__*/new Matrix4();\n\n\tconst _obj = /*@__PURE__*/new Object3D();\n\n\tconst _offset = /*@__PURE__*/new Vector3();\n\n\tconst _box$1 = /*@__PURE__*/new Box3();\n\n\tconst _boxMorphTargets = /*@__PURE__*/new Box3();\n\n\tconst _vector$8 = /*@__PURE__*/new Vector3();\n\n\tclass BufferGeometry extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _id++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.morphTargetsRelative = false;\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\t\tthis.drawRange = {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: Infinity\n\t\t\t};\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tgetIndex() {\n\t\t\treturn this.index;\n\t\t}\n\n\t\tsetIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t}\n\n\t\tsetAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t}\n\n\t\thasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t}\n\n\t\taddGroup(start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t}\n\n\t\tclearGroups() {\n\t\t\tthis.groups = [];\n\t\t}\n\n\t\tsetDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\t_m1.makeRotationFromQuaternion(q);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tlookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tcenter() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t}\n\n\t\tcomputeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeTangents() {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeVertexNormals() {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tmerge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalizeNormals() {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t}\n\n\t\ttoNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\tindex = indices[i] * attribute.data.stride + attribute.offset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindex = indices[i] * itemSize;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tBufferGeometry.prototype.isBufferGeometry = true;\n\n\tconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$2 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$3 = /*@__PURE__*/new Sphere();\n\n\tconst _vA$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vB$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vC$1 = /*@__PURE__*/new Vector3();\n\n\tconst _tempA = /*@__PURE__*/new Vector3();\n\n\tconst _tempB = /*@__PURE__*/new Vector3();\n\n\tconst _tempC = /*@__PURE__*/new Vector3();\n\n\tconst _morphA = /*@__PURE__*/new Vector3();\n\n\tconst _morphB = /*@__PURE__*/new Vector3();\n\n\tconst _morphC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tconst _intersectionPoint = /*@__PURE__*/new Vector3();\n\n\tconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n\tclass Mesh extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Mesh';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tMesh.prototype.isMesh = true;\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>\n\t * }\n\t */\n\n\tclass ShaderMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShaderMaterial';\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\t\tthis.vertexShader = default_vertex;\n\t\t\tthis.fragmentShader = default_fragment;\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false; // set to use scene fog\n\n\t\t\tthis.lights = false; // set to use scene lights\n\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false,\n\t\t\t\t// set to use derivatives\n\t\t\t\tfragDepth: false,\n\t\t\t\t// set to use fragment depth values\n\t\t\t\tdrawBuffers: false,\n\t\t\t\t// set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [1, 1, 1],\n\t\t\t\t'uv': [0, 0],\n\t\t\t\t'uv2': [0, 0]\n\t\t\t};\n\t\t\tthis.index0AttributeName = undefined;\n\t\t\tthis.uniformsNeedUpdate = false;\n\t\t\tthis.glslVersion = null;\n\n\t\t\tif (parameters !== undefined) {\n\t\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t\t}\n\n\t\t\t\tthis.setValues(parameters);\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\t\tthis.defines = Object.assign({}, source.defines);\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\t\tthis.glslVersion = source.glslVersion;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.glslVersion = this.glslVersion;\n\t\t\tdata.uniforms = {};\n\n\t\t\tfor (const name in this.uniforms) {\n\t\t\t\tconst uniform = this.uniforms[name];\n\t\t\t\tconst value = uniform.value;\n\n\t\t\t\tif (value && value.isTexture) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 't',\n\t\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isColor) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'c',\n\t\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector2) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v2',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\t\tconst extensions = {};\n\n\t\t\tfor (const key in this.extensions) {\n\t\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t\t}\n\n\t\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tclass Camera extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Camera';\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\t\tthis.projectionMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tsuper.updateWorldMatrix(updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tCamera.prototype.isCamera = true;\n\n\tclass PerspectiveCamera extends Camera {\n\t\tconstructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\t\tthis.fov = fov;\n\t\t\tthis.zoom = 1;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.focus = 10;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.view = null;\n\t\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\n\n\t\tsetFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\n\n\t\tgetFocalLength() {\n\t\t\tconst vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t}\n\n\t\tgetEffectiveFOV() {\n\t\t\treturn RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t}\n\n\t\tgetFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t}\n\n\t\tgetFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t}\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {}; // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.isRenderTargetTexture = true;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t} else if (array instanceof Uint8ClampedArray) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\n\tvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( geometry.viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float NoH ) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float NoV, float NoL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( NoL + NoV - NoL * NoV ) ) );\\n}\\nvec3 BRDF_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in GeometricContext geometry ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularTintFactor = specularTint;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\t\\tspecularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularTintFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenTint = sheenTint;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenTint;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( material.roughness, directLight.direction, geometry, material.sheenTint );\\n\\t#else\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\n\tvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\n\tvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationTint, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = transmission.a;\\n#endif\";\n\n\tvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationTint;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshnormal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar meshnormal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularTint;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\tuniform sampler2D specularTintMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenTint;\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\talphatest_pars_fragment: alphatest_pars_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormal_pars_fragment: normal_pars_fragment,\n\t\tnormal_pars_vertex: normal_pars_vertex,\n\t\tnormal_vertex: normal_vertex,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\toutput_fragment: output_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmission_fragment: transmission_fragment,\n\t\ttransmission_pars_fragment: transmission_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshnormal_frag: meshnormal_frag,\n\t\tmeshnormal_vert: meshnormal_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\t// basic, lambert, phong\n\t\t\tior: {\n\t\t\t\tvalue: 1.5\n\t\t\t},\n\t\t\t// standard, physical\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheenTint: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmissionSamplerSize: {\n\t\t\t\tvalue: new Vector2()\n\t\t\t},\n\t\t\ttransmissionSamplerMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tthickness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tthicknessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tattenuationDistance: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tattenuationTint: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\tspecularIntensity: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tspecularIntensityMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tspecularTint: {\n\t\t\t\tvalue: new Color(1, 1, 1)\n\t\t\t},\n\t\t\tspecularTintMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene) {\n\t\t\tlet forceClear = false;\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute.location >= 0) {\n\t\t\t\t\tlet geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute === undefined) {\n\t\t\t\t\t\tif (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\t\tif (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttribute(programAttribute.location + i);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\tvertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttribute(programAttribute.location + i);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\tvertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute.location, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute.location, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute.location, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute.location, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tdrawBuffers: drawBuffers,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture && texture.isRenderTargetTexture === false) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\t\t\tname: 'PMREM.Background',\n\t\t\t\tside: BackSide,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tdepthTest: false\n\t\t\t});\n\t\t\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background);\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor);\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\tbackgroundBox.geometry.dispose();\n\t\t\tbackgroundBox.material.dispose();\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\tscene.background = background;\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction WebGLCubeUVMaps(renderer) {\n\t\tlet cubeUVmaps = new WeakMap();\n\t\tlet pmremGenerator = null;\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture && texture.isRenderTargetTexture === false) {\n\t\t\t\tconst mapping = texture.mapping;\n\t\t\t\tconst isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;\n\t\t\t\tconst isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;\n\n\t\t\t\tif (isEquirectMap || isCubeMap) {\n\t\t\t\t\t// equirect/cube map to cubeUV conversion\n\t\t\t\t\tif (cubeUVmaps.has(texture)) {\n\t\t\t\t\t\treturn cubeUVmaps.get(texture).texture;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tif (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);\n\t\t\t\t\t\t\tcubeUVmaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction isCubeTextureComplete(image) {\n\t\t\tlet count = 0;\n\t\t\tconst length = 6;\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tif (image[i] !== undefined) count++;\n\t\t\t}\n\n\t\t\treturn count === length;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemapUV = cubeUVmaps.get(texture);\n\n\t\t\tif (cubemapUV !== undefined) {\n\t\t\t\tcubeUVmaps.delete(texture);\n\t\t\t\tcubemapUV.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubeUVmaps = new WeakMap();\n\n\t\t\tif (pmremGenerator !== null) {\n\t\t\t\tpmremGenerator.dispose();\n\t\t\t\tpmremGenerator = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined || influences.length !== length) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst influence = influences[i];\n\t\t\t\tinfluence[0] = i;\n\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\tconst index = influence[0];\n\t\t\t\tconst value = influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst errors = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && errors === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers(gl.getShaderSource(shader));\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name;\n\t\t\tlet locationSize = 1;\n\t\t\tif (info.type === gl.FLOAT_MAT2) locationSize = 2;\n\t\t\tif (info.type === gl.FLOAT_MAT3) locationSize = 3;\n\t\t\tif (info.type === gl.FLOAT_MAT4) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = {\n\t\t\t\ttype: info.type,\n\t\t\t\tlocation: gl.getAttribLocation(program, name),\n\t\t\t\tlocationSize: locationSize\n\t\t\t};\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\t// TODO Send this event to Three.js DevTools\n\t\t// console.log( 'WebGLProgram', cacheKey );\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularTintMap ? '#define USE_SPECULARTINTMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, '#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularTintMap ? '#define USE_SPECULARTINTMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheenTint ? '#define USE_SHEEN' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.format === RGBFormat ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.specularTintMap ? getTexelDecodingFunction('specularTintMapTexelToLinear', parameters.specularTintMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + '\\n\\n' + 'Program Info Log: ' + programLog + '\\n' + vertexErrors + '\\n' + fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Program Info Log:', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'specularIntensityMap', 'specularTintMap', 'specularTintMapEncoding', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format', 'sheenTint', 'transmission', 'transmissionMap', 'thicknessMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\t\tconst useClearcoat = material.clearcoat > 0;\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoat: useClearcoat,\n\t\t\t\tclearcoatMap: useClearcoat && !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\tspecularIntensityMap: !!material.specularIntensityMap,\n\t\t\t\tspecularTintMap: !!material.specularTintMap,\n\t\t\t\tspecularTintMapEncoding: getTextureEncodingFromMap(material.specularTintMap),\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\talphaTest: useAlphaTest,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheenTint: !!material.sheenTint && (material.sheenTint.r > 0 || material.sheenTint.g > 0 || material.sheenTint.b > 0),\n\t\t\t\ttransmission: material.transmission > 0,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tthicknessMap: !!material.thicknessMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularTintMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularTintMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,\n\t\t\t\tmorphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tformat: material.format,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transmissive = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransmissive.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.push(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.push(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.push(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.unshift(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.unshift(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.unshift(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransmissive: transmissive,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights, physicallyCorrectLights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst); // artist-friendly light intensity scaling factor\n\n\t\t\tconst scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\t\tb += color.b * intensity * scaleFactor;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights(physicallyCorrectLights) {\n\t\t\tlights.setup(lightsArray, physicallyCorrectLights);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\nuniform float samples;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterial = new MeshDepthMaterial({\n\t\t\tdepthPacking: RGBADepthPacking\n\t\t}),\n\t\t\t\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t},\n\t\t\t\tsamples: {\n\t\t\t\t\tvalue: 8.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\tshadowMaterialVertical.uniforms.samples.value = shadow.blurSamples;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t\tshadowMaterialHorizontal.uniforms.samples.value = shadow.blurSamples;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tconst customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\t\tif (customMaterial !== undefined) {\n\t\t\t\tresult = customMaterial;\n\t\t\t} else {\n\t\t\t\tresult = light.isPointLight === true ? _distanceMaterial : _depthMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.alphaMap = material.alphaMap;\n\t\t\tresult.alphaTest = material.alphaTest;\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.displacementMap = material.displacementMap;\n\t\t\tresult.displacementScale = material.displacementScale;\n\t\t\tresult.displacementBias = material.displacementBias;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n\t\tconst viewportParam = gl.getParameter(gl.VIEWPORT);\n\t\tconst currentScissor = new Vector4().fromArray(scissorParam);\n\t\tconst currentViewport = new Vector4().fromArray(viewportParam);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\t\t\t\t\tif (target === gl.DRAW_FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target === gl.FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo$1(image) {\n\t\t\treturn isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height, depth = 1) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height, depth));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\t\tinfo.memory.textures--;\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\tfor (let i = 0, il = texture.length; i < il; i++) {\n\t\t\t\t\tconst attachmentProperties = properties.get(texture[i]);\n\n\t\t\t\t\tif (attachmentProperties.__webglTexture) {\n\t\t\t\t\t\t_gl.deleteTexture(attachmentProperties.__webglTexture);\n\n\t\t\t\t\t\tinfo.memory.textures--;\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.remove(texture[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\t// Use the first texture for MRT so far\n\t\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets !== true) {\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultipleRenderTargets) {\n\t\t\t\t\tif (capabilities.drawBuffers) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\tconst attachmentProperties = properties.get(textures[i]);\n\n\t\t\t\t\t\t\tif (attachmentProperties.__webglTexture === undefined) {\n\t\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\t\t\t\t\t\t\t\tinfo.memory.textures++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n\t\t\t\t\t}\n\t\t\t\t} else if (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.unbindTexture();\n\t\t\t} else if (isMultipleRenderTargets) {\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\tconst attachment = textures[i];\n\t\t\t\t\tconst attachmentProperties = properties.get(attachment);\n\t\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n\t\t\t\t\tsetTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n\t\t\t\t\tif (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n\t\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.unbindTexture();\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth);\n\t\t\t\t}\n\n\t\t\t\tstate.unbindTexture();\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t\tstate.unbindTexture();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tconst _moveEvent = {\n\t\ttype: 'move'\n\t};\n\n\tclass WebXRController {\n\t\tconstructor() {\n\t\t\tthis._targetRay = null;\n\t\t\tthis._grip = null;\n\t\t\tthis._hand = null;\n\t\t}\n\n\t\tgetHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t}\n\n\t\tgetTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t}\n\n\t\tgetGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\t\tthis._grip.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tupdate(inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n\t\t\t\t\t\tif (inputPose.linearVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\t\ttargetRay.linearVelocity.copy(inputPose.linearVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inputPose.angularVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\t\ttargetRay.angularVelocity.copy(inputPose.angularVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dispatchEvent(_moveEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n\t\t\t\t\t\t\tif (gripPose.linearVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\t\tgrip.linearVelocity.copy(gripPose.linearVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (gripPose.angularVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\t\tgrip.angularVelocity.copy(gripPose.angularVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass WebXRManager extends EventDispatcher {\n\t\tconstructor(renderer, gl) {\n\t\t\tsuper();\n\t\t\tconst scope = this;\n\t\t\tconst state = renderer.state;\n\t\t\tlet session = null;\n\t\t\tlet framebufferScaleFactor = 1.0;\n\t\t\tlet referenceSpace = null;\n\t\t\tlet referenceSpaceType = 'local-floor';\n\t\t\tlet pose = null;\n\t\t\tlet glBinding = null;\n\t\t\tlet glFramebuffer = null;\n\t\t\tlet glProjLayer = null;\n\t\t\tlet glBaseLayer = null;\n\t\t\tlet isMultisample = false;\n\t\t\tlet glMultisampledFramebuffer = null;\n\t\t\tlet glColorRenderbuffer = null;\n\t\t\tlet glDepthRenderbuffer = null;\n\t\t\tlet xrFrame = null;\n\t\t\tlet depthStyle = null;\n\t\t\tlet clearStyle = null;\n\t\t\tconst controllers = [];\n\t\t\tconst inputSourcesMap = new Map(); //\n\n\t\t\tconst cameraL = new PerspectiveCamera();\n\t\t\tcameraL.layers.enable(1);\n\t\t\tcameraL.viewport = new Vector4();\n\t\t\tconst cameraR = new PerspectiveCamera();\n\t\t\tcameraR.layers.enable(2);\n\t\t\tcameraR.viewport = new Vector4();\n\t\t\tconst cameras = [cameraL, cameraR];\n\t\t\tconst cameraVR = new ArrayCamera();\n\t\t\tcameraVR.layers.enable(1);\n\t\t\tcameraVR.layers.enable(2);\n\t\t\tlet _currentDepthNear = null;\n\t\t\tlet _currentDepthFar = null; //\n\n\t\t\tthis.cameraAutoUpdate = true;\n\t\t\tthis.enabled = false;\n\t\t\tthis.isPresenting = false;\n\n\t\t\tthis.getController = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getTargetRaySpace();\n\t\t\t};\n\n\t\t\tthis.getControllerGrip = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getGripSpace();\n\t\t\t};\n\n\t\t\tthis.getHand = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getHandSpace();\n\t\t\t}; //\n\n\n\t\t\tfunction onSessionEvent(event) {\n\t\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tdata: event.inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onSessionEnd() {\n\t\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t\t});\n\t\t\t\tinputSourcesMap.clear();\n\t\t\t\t_currentDepthNear = null;\n\t\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\t\tstate.bindXRFramebuffer(null);\n\t\t\t\trenderer.setRenderTarget(renderer.getRenderTarget());\n\t\t\t\tif (glFramebuffer) gl.deleteFramebuffer(glFramebuffer);\n\t\t\t\tif (glMultisampledFramebuffer) gl.deleteFramebuffer(glMultisampledFramebuffer);\n\t\t\t\tif (glColorRenderbuffer) gl.deleteRenderbuffer(glColorRenderbuffer);\n\t\t\t\tif (glDepthRenderbuffer) gl.deleteRenderbuffer(glDepthRenderbuffer);\n\t\t\t\tglFramebuffer = null;\n\t\t\t\tglMultisampledFramebuffer = null;\n\t\t\t\tglColorRenderbuffer = null;\n\t\t\t\tglDepthRenderbuffer = null;\n\t\t\t\tglBaseLayer = null;\n\t\t\t\tglProjLayer = null;\n\t\t\t\tglBinding = null;\n\t\t\t\tsession = null; //\n\n\t\t\t\tanimation.stop();\n\t\t\t\tscope.isPresenting = false;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionend'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\t\tframebufferScaleFactor = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\t\treferenceSpaceType = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getReferenceSpace = function () {\n\t\t\t\treturn referenceSpace;\n\t\t\t};\n\n\t\t\tthis.getBaseLayer = function () {\n\t\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\t\t\t};\n\n\t\t\tthis.getBinding = function () {\n\t\t\t\treturn glBinding;\n\t\t\t};\n\n\t\t\tthis.getFrame = function () {\n\t\t\t\treturn xrFrame;\n\t\t\t};\n\n\t\t\tthis.getSession = function () {\n\t\t\t\treturn session;\n\t\t\t};\n\n\t\t\tthis.setSession = async function (value) {\n\t\t\t\tsession = value;\n\n\t\t\t\tif (session !== null) {\n\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (session.renderState.layers === undefined) {\n\t\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t};\n\t\t\t\t\t\tglBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\tbaseLayer: glBaseLayer\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (gl instanceof WebGLRenderingContext) {\n\t\t\t\t\t\t// Use old style webgl layer because we can't use MSAA\n\t\t\t\t\t\t// WebGL2 support.\n\t\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\t\tantialias: true,\n\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t};\n\t\t\t\t\t\tglBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\tlayers: [glBaseLayer]\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisMultisample = attributes.antialias;\n\t\t\t\t\t\tlet depthFormat = null;\n\n\t\t\t\t\t\tif (attributes.depth) {\n\t\t\t\t\t\t\tclearStyle = gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\t\t\tif (attributes.stencil) clearStyle |= gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\t\t\tdepthStyle = attributes.stencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\t\tdepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\t\tcolorFormat: attributes.alpha ? gl.RGBA8 : gl.RGB8,\n\t\t\t\t\t\t\tdepthFormat: depthFormat,\n\t\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t};\n\t\t\t\t\t\tglBinding = new XRWebGLBinding(session, gl);\n\t\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer(projectionlayerInit);\n\t\t\t\t\t\tglFramebuffer = gl.createFramebuffer();\n\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\tlayers: [glProjLayer]\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (isMultisample) {\n\t\t\t\t\t\t\tglMultisampledFramebuffer = gl.createFramebuffer();\n\t\t\t\t\t\t\tglColorRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, glColorRenderbuffer);\n\t\t\t\t\t\t\tgl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, glProjLayer.textureWidth, glProjLayer.textureHeight);\n\t\t\t\t\t\t\tstate.bindFramebuffer(gl.FRAMEBUFFER, glMultisampledFramebuffer);\n\t\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, glColorRenderbuffer);\n\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\t\tif (depthFormat !== null) {\n\t\t\t\t\t\t\t\tglDepthRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, glDepthRenderbuffer);\n\t\t\t\t\t\t\t\tgl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight);\n\t\t\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, glDepthRenderbuffer);\n\t\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstate.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\tanimation.start();\n\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onInputSourcesChange(event) {\n\t\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t\t} // Notify disconnected\n\n\n\t\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t\t}\n\t\t\t\t} // Notify connected\n\n\n\t\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst cameraLPos = new Vector3();\n\t\t\tconst cameraRPos = new Vector3();\n\t\t\t/**\n\t\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t\t * the cameras' projection and world matrices have already been set.\n\t\t\t * And that near and far planes are identical for both cameras.\n\t\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t\t */\n\n\t\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t\t// Use the left camera for these values.\n\n\t\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\t\tconst left = near * leftFov;\n\t\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.translateX(xOffset);\n\t\t\t\tcamera.translateZ(zOffset);\n\t\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t\t}\n\n\t\t\tfunction updateCamera(camera, parent) {\n\t\t\t\tif (parent === null) {\n\t\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t\t}\n\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t\t}\n\n\t\t\tthis.updateCamera = function (camera) {\n\t\t\t\tif (session === null) return;\n\t\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t\t});\n\t\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t\t}\n\n\t\t\t\tconst parent = camera.parent;\n\t\t\t\tconst cameras = cameraVR.cameras;\n\t\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t\t}\n\n\t\t\t\tcameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children\n\n\t\t\t\tcamera.position.copy(cameraVR.position);\n\t\t\t\tcamera.quaternion.copy(cameraVR.quaternion);\n\t\t\t\tcamera.scale.copy(cameraVR.scale);\n\t\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\t\tconst children = camera.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\t\tif (cameras.length === 2) {\n\t\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t\t} else {\n\t\t\t\t\t// assume single camera setup (AR)\n\t\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getCamera = function () {\n\t\t\t\treturn cameraVR;\n\t\t\t};\n\n\t\t\tthis.getFoveation = function () {\n\t\t\t\tif (glProjLayer !== null) {\n\t\t\t\t\treturn glProjLayer.fixedFoveation;\n\t\t\t\t}\n\n\t\t\t\tif (glBaseLayer !== null) {\n\t\t\t\t\treturn glBaseLayer.fixedFoveation;\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t};\n\n\t\t\tthis.setFoveation = function (foveation) {\n\t\t\t\t// 0 = no foveation = full resolution\n\t\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\t\t\t\tif (glProjLayer !== null) {\n\t\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\t\t\t\t}\n\n\t\t\t\tif (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {\n\t\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\t\t\t\t}\n\t\t\t}; // Animation Loop\n\n\n\t\t\tlet onAnimationFrameCallback = null;\n\n\t\t\tfunction onAnimationFrame(time, frame) {\n\t\t\t\tpose = frame.getViewerPose(referenceSpace);\n\t\t\t\txrFrame = frame;\n\n\t\t\t\tif (pose !== null) {\n\t\t\t\t\tconst views = pose.views;\n\n\t\t\t\t\tif (glBaseLayer !== null) {\n\t\t\t\t\t\tstate.bindXRFramebuffer(glBaseLayer.framebuffer);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\t\tconst view = views[i];\n\t\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\t\tif (glBaseLayer !== null) {\n\t\t\t\t\t\t\tviewport = glBaseLayer.getViewport(view);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage(glProjLayer, view);\n\t\t\t\t\t\t\tstate.bindXRFramebuffer(glFramebuffer);\n\n\t\t\t\t\t\t\tif (glSubImage.depthStencilTexture !== undefined) {\n\t\t\t\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, glSubImage.depthStencilTexture, 0);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glSubImage.colorTexture, 0);\n\t\t\t\t\t\t\tviewport = glSubImage.viewport;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isMultisample) {\n\t\t\t\t\t\tstate.bindXRFramebuffer(glMultisampledFramebuffer);\n\t\t\t\t\t\tif (clearStyle !== null) gl.clear(clearStyle);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tconst controller = controllers[i];\n\t\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t\t}\n\n\t\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst width = glProjLayer.textureWidth;\n\t\t\t\t\tconst height = glProjLayer.textureHeight;\n\t\t\t\t\tstate.bindFramebuffer(gl.READ_FRAMEBUFFER, glMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(gl.DRAW_FRAMEBUFFER, glFramebuffer); // Invalidate the depth here to avoid flush of the depth data to main memory.\n\n\t\t\t\t\tgl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [depthStyle]);\n\t\t\t\t\tgl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [depthStyle]);\n\t\t\t\t\tgl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST); // Invalidate the MSAA buffer because it's not needed anymore.\n\n\t\t\t\t\tgl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0]);\n\t\t\t\t\tstate.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(gl.FRAMEBUFFER, glMultisampledFramebuffer);\n\t\t\t\t}\n\n\t\t\t\txrFrame = null;\n\t\t\t}\n\n\t\t\tconst animation = new WebGLAnimation();\n\t\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\t\tthis.setAnimationLoop = function (callback) {\n\t\t\t\tonAnimationFrameCallback = callback;\n\t\t\t};\n\n\t\t\tthis.dispose = function () {};\n\t\t}\n\n\t}\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tif (material.alphaTest > 0) {\n\t\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.ior.value = material.ior;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\t\t\t// 13. specular intensity map\n\t\t\t// 14. specular tint map\n\t\t\t// 15. transmission map\n\t\t\t// 16. thickness map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t} else if (material.specularIntensityMap) {\n\t\t\t\tuvScaleMap = material.specularIntensityMap;\n\t\t\t} else if (material.specularTintMap) {\n\t\t\t\tuvScaleMap = material.specularTintMap;\n\t\t\t} else if (material.transmissionMap) {\n\t\t\t\tuvScaleMap = material.transmissionMap;\n\t\t\t} else if (material.thicknessMap) {\n\t\t\t\tuvScaleMap = material.thicknessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.alphaTest > 0) {\n\t\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.alphaTest > 0) {\n\t\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\t\tif (material.sheenTint) uniforms.sheenTint.value.copy(material.sheenTint);\n\n\t\t\tif (material.clearcoat > 0) {\n\t\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\t\tif (material.clearcoatMap) {\n\t\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t\t}\n\n\t\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t\t}\n\n\t\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.transmission > 0) {\n\t\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\t\tuniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\n\t\t\t\tif (material.transmissionMap) {\n\t\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t\t}\n\n\t\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\t\tif (material.thicknessMap) {\n\t\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\t\t\t\t}\n\n\t\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\t\tuniforms.attenuationTint.value.copy(material.attenuationTint);\n\t\t\t}\n\n\t\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\t\tuniforms.specularTint.value.copy(material.specularTint);\n\n\t\t\tif (material.specularIntensityMap) {\n\t\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\t\t\t}\n\n\t\t\tif (material.specularTintMap) {\n\t\t\t\tuniforms.specularTintMap.value = material.specularTintMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters = {}) {\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; //\n\n\t\tconst _currentDrawBuffers = []; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // transmission\n\n\t\tlet _transmissionRenderTarget = null; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tcubeuvmaps = new WebGLCubeUVMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tcubeuvmaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\n\t\t\tif (_transmissionRenderTarget) {\n\t\t\t\t_transmissionRenderTarget.dispose();\n\n\t\t\t\t_transmissionRenderTarget = null;\n\t\t\t}\n\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore() {\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tconst buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tconst programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position.location);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position.location, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal.location);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal.location, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv.location);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv.location, 2, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color.location);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color.location, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights(_this.physicallyCorrectLights);\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\trenderStateStack.pop();\n\t\t\tcurrentRenderState = null;\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tif (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset(); //\n\n\t\t\tbackground.render(currentRenderList, scene); // render scene\n\n\t\t\tcurrentRenderState.setupLights(_this.physicallyCorrectLights);\n\n\t\t\tif (camera.isArrayCamera) {\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor (let i = 0, l = cameras.length; i < l; i++) {\n\t\t\t\t\tconst camera2 = cameras[i];\n\t\t\t\t\trenderScene(currentRenderList, scene, camera2, camera2.viewport);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderScene(currentRenderList, scene, camera);\n\t\t\t} //\n\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderScene(currentRenderList, scene, camera, viewport) {\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);\n\t\t\tif (viewport) state.viewport(_currentViewport.copy(viewport));\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);\n\t\t}\n\n\t\tfunction renderTransmissionPass(opaqueObjects, scene, camera) {\n\t\t\tif (_transmissionRenderTarget === null) {\n\t\t\t\tconst needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n\t\t\t\tconst renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n\t\t\t\t_transmissionRenderTarget = new renderTargetType(1024, 1024, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\ttype: utils.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\n\t\t\t_this.setRenderTarget(_transmissionRenderTarget);\n\n\t\t\t_this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.\n\t\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\n\n\t\t\tconst currentToneMapping = _this.toneMapping;\n\t\t\t_this.toneMapping = NoToneMapping;\n\t\t\trenderObjects(opaqueObjects, scene, camera);\n\t\t\t_this.toneMapping = currentToneMapping;\n\t\t\ttextures.updateMultisampleRenderTarget(_transmissionRenderTarget);\n\t\t\ttextures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n\t\t\t_this.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (object.layers.test(camera.layers)) {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\tif (material.transparent === true && material.side === DoubleSide) {\n\t\t\t\t\tmaterial.side = BackSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\n\t\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\n\t\t\t\t\tmaterial.side = DoubleSide;\n\t\t\t\t} else {\n\t\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBuild(parameters, _this);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\t\tconst vertexTangents = !!object.geometry && !!object.geometry.attributes.tangent;\n\t\t\tconst morphTargets = !!object.geometry && !!object.geometry.morphAttributes.position;\n\t\t\tconst morphNormals = !!object.geometry && !!object.geometry.morphAttributes.normal;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexTangents !== vertexTangents) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.morphTargets !== morphTargets) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.morphNormals !== morphNormals) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (framebufferBound && capabilities.drawBuffers) {\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tif (renderTarget) {\n\t\t\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\t\t_currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n\t\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (needsUpdate) {\n\t\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t\t_gl.drawBuffers(_currentDrawBuffers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\n\t\t\t_currentMaterialId = -1; // reset current material to ensure correct uniform bindings\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tlet glFormat = utils.convert(texture.format);\n\n\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t\t// Not needed in Chrome 93+\n\t\t\t\tif (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n\t\t\t\tif (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\tif (srcTexture.isDataTexture || srcTexture.isDataTexture3D) {\n\t\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');\n\n\t\t\t\t\t_gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tclass InterleavedBuffer {\n\t\tconstructor(array, stride) {\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t\tthis.uuid = generateUUID();\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new this.constructor(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\n\t}\n\n\tInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n\tconst _vector$6 = /*@__PURE__*/new Vector3();\n\n\tclass InterleavedBufferAttribute {\n\t\tconstructor(interleavedBuffer, itemSize, offset, normalized = false) {\n\t\t\tthis.name = '';\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\t\tthis.normalized = normalized === true;\n\t\t}\n\n\t\tget count() {\n\t\t\treturn this.data.count;\n\t\t}\n\n\t\tget array() {\n\t\t\treturn this.data.array;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tthis.data.needsUpdate = value;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t}\n\n\tInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = /*@__PURE__*/new Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/new Vector4();\n\n\tconst _skinWeight = /*@__PURE__*/new Vector4();\n\n\tconst _vector$5 = /*@__PURE__*/new Vector3();\n\n\tconst _matrix = /*@__PURE__*/new Matrix4();\n\n\tclass SkinnedMesh extends Mesh {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkinnedMesh';\n\t\t\tthis.bindMode = 'attached';\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t}\n\n\t\tbind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t}\n\n\t\tpose() {\n\t\t\tthis.skeleton.pose();\n\t\t}\n\n\t\tnormalizeSkinWeights() {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t}\n\n\t\tboneTransform(index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\n\t}\n\n\tSkinnedMesh.prototype.isSkinnedMesh = true;\n\n\tclass Bone extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Bone';\n\t\t}\n\n\t}\n\n\tBone.prototype.isBone = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tcomputeBoneTexture() {\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\tlet size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\tsize = ceilPowerOfTwo(size);\n\t\t\tsize = Math.max(size, 4);\n\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\tboneMatrices.set(this.boneMatrices); // copy current values\n\n\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\tthis.boneMatrices = boneMatrices;\n\t\t\tthis.boneTexture = boneTexture;\n\t\t\tthis.boneTextureSize = size;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass InstancedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized, meshPerAttribute = 1) {\n\t\t\tif (typeof normalized === 'number') {\n\t\t\t\tmeshPerAttribute = normalized;\n\t\t\t\tnormalized = false;\n\t\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t\t}\n\n\t\t\tsuper(array, itemSize, normalized);\n\t\t\tthis.meshPerAttribute = meshPerAttribute;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = /*@__PURE__*/new Mesh();\n\n\tclass InstancedMesh extends Mesh {\n\t\tconstructor(geometry, material, count) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);\n\t\t\tthis.instanceColor = null;\n\t\t\tthis.count = count;\n\t\t\tthis.frustumCulled = false;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tgetMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tsetMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\tupdateMorphTargets() {}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tInstancedMesh.prototype.isInstancedMesh = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = /*@__PURE__*/new Vector3();\n\n\tconst _end$1 = /*@__PURE__*/new Vector3();\n\n\tconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$1 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tclass Line extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Line';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tLine.prototype.isLine = true;\n\n\tconst _start = /*@__PURE__*/new Vector3();\n\n\tconst _end = /*@__PURE__*/new Vector3();\n\n\tclass LineSegments extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineSegments';\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineSegments.prototype.isLineSegments = true;\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _ray = /*@__PURE__*/new Ray();\n\n\tconst _sphere = /*@__PURE__*/new Sphere();\n\n\tconst _position$2 = /*@__PURE__*/new Vector3();\n\n\tclass Points extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Points';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tPoints.prototype.isPoints = true;\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices, indices, radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new DodecahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry, thresholdAngle) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\tconst thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tconst indexArr = [0, 0, 0];\n\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\tconst hashes = new Array(3);\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\n\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\ta,\n\t\t\t\t\tb,\n\t\t\t\t\tc\n\t\t\t\t} = _triangle;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (const key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tindex0,\n\t\t\t\t\t\tindex1\n\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tclass Curve {\n\t\tconstructor() {\n\t\t\tthis.type = 'Curve';\n\t\t\tthis.arcLengthDivisions = 200;\n\t\t} // Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\n\t\tgetPoint() {\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t} // Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t} // Get sequence of points using getPoint( t )\n\n\n\t\tgetPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get sequence of points using getPointAt( u )\n\n\n\t\tgetSpacedPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get total curve arc length\n\n\n\t\tgetLength() {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t} // Get list of cumulative segment lengths\n\n\n\t\tgetLengths(divisions = this.arcLengthDivisions) {\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t}\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n\t\tgetUtoTmapping(u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t} // Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tgetTangentAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t}\n\n\t\tcomputeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim = 2) {\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tclass ShapeUtils {\n\t\t// calculate area of the contour polygon\n\t\tstatic area(contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t}\n\n\t\tstatic isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t}\n\n\t\tstatic triangulateShape(contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\n\t}\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, options) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t\tstatic fromJSON(data, shapes) {\n\t\t\tconst geometryShapes = [];\n\n\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\tgeometryShapes.push(shape);\n\t\t\t}\n\n\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\tif (extrudePath !== undefined) {\n\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t}\n\n\t\t\treturn new ExtrudeGeometry(geometryShapes, data.options);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new IcosahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new OctahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tclass ParametricGeometry extends BufferGeometry {\n\t\tconstructor(func, slices, stacks) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ParametricGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst EPS = 0.00001;\n\t\t\tconst normal = new Vector3();\n\t\t\tconst p0 = new Vector3(),\n\t\t\t\t\t\tp1 = new Vector3();\n\t\t\tconst pu = new Vector3(),\n\t\t\t\t\t\tpv = new Vector3();\n\n\t\t\tif (func.length < 3) {\n\t\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t\t} // generate vertices, normals and uvs\n\n\n\t\t\tconst sliceCount = slices + 1;\n\n\t\t\tfor (let i = 0; i <= stacks; i++) {\n\t\t\t\tconst v = i / stacks;\n\n\t\t\t\tfor (let j = 0; j <= slices; j++) {\n\t\t\t\t\tconst u = j / slices; // vertex\n\n\t\t\t\t\tfunc(u, v, p0);\n\t\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u, v);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let i = 0; i < stacks; i++) {\n\t\t\t\tfor (let j = 0; j < slices; j++) {\n\t\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\t\tconst c = (i + 1) * sliceCount + j + 1;\n\t\t\t\t\tconst d = (i + 1) * sliceCount + j; // faces one and two\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t\tstatic fromJSON(data, shapes) {\n\t\t\tconst geometryShapes = [];\n\n\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\tgeometryShapes.push(shape);\n\t\t\t}\n\n\t\t\treturn new ShapeGeometry(geometryShapes, data.curveSegments);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new TetrahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *\tfont: <THREE.Font>, // font\n\t *\n\t *\tsize: <float>, // size of the text\n\t *\theight: <float>, // thickness to extrude text\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into text bevel goes\n\t *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\tclass TextGeometry extends ExtrudeGeometry {\n\t\tconstructor(text, parameters = {}) {\n\t\t\tconst font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry();\n\t\t\t}\n\n\t\t\tconst shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\tsuper(shapes, parameters);\n\t\t\tthis.type = 'TextGeometry';\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\treturn new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t} // buffer\n\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set(); // helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tconst index1 = indices.getX(i + j);\n\t\t\t\t\t\t\tconst index2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tstart.fromBufferAttribute(position, index1);\n\t\t\t\t\t\t\tend.fromBufferAttribute(position, index2);\n\n\t\t\t\t\t\t\tif (isUniqueEdge(start, end, edges) === true) {\n\t\t\t\t\t\t\t\tvertices.push(start.x, start.y, start.z);\n\t\t\t\t\t\t\t\tvertices.push(end.x, end.y, end.z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\tstart.fromBufferAttribute(position, index1);\n\t\t\t\t\t\tend.fromBufferAttribute(position, index2);\n\n\t\t\t\t\t\tif (isUniqueEdge(start, end, edges) === true) {\n\t\t\t\t\t\t\tvertices.push(start.x, start.y, start.z);\n\t\t\t\t\t\t\tvertices.push(end.x, end.y, end.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\tfunction isUniqueEdge(start, end, edges) {\n\t\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\t\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\t\tif (edges.has(hash1) === true || edges.has(hash2) === true) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tedges.add(hash1, hash2);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshStandardMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.roughness = 1.0;\n\t\t\tthis.metalness = 0.0;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.roughnessMap = null;\n\t\t\tthis.metalnessMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tior: <float>,\n\t *\treflectivity: <float>,\n\t *\n\t *\tsheenTint: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tthickness: <float>,\n\t *\tthicknessMap: new THREE.Texture( <Image> ),\n\t *\tattenuationDistance: <float>,\n\t *\tattenuationTint: <Color>,\n\t *\n\t *\tspecularIntensity: <float>,\n\t *\tspecularIntensityhMap: new THREE.Texture( <Image> ),\n\t *\tspecularTint: <Color>,\n\t *\tspecularTintMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\t\tthis.clearcoatMap = null;\n\t\t\tthis.clearcoatRoughness = 0.0;\n\t\t\tthis.clearcoatRoughnessMap = null;\n\t\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\t\tthis.clearcoatNormalMap = null;\n\t\t\tthis.ior = 1.5;\n\t\t\tObject.defineProperty(this, 'reflectivity', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n\t\t\t\t},\n\t\t\t\tset: function (reflectivity) {\n\t\t\t\t\tthis.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.sheenTint = new Color(0x000000);\n\t\t\tthis.transmission = 0.0;\n\t\t\tthis.transmissionMap = null;\n\t\t\tthis.thickness = 0.01;\n\t\t\tthis.thicknessMap = null;\n\t\t\tthis.attenuationDistance = 0.0;\n\t\t\tthis.attenuationTint = new Color(1, 1, 1);\n\t\t\tthis.specularIntensity = 1.0;\n\t\t\tthis.specularIntensityMap = null;\n\t\t\tthis.specularTint = new Color(1, 1, 1);\n\t\t\tthis.specularTintMap = null;\n\t\t\tthis._clearcoat = 0;\n\t\t\tthis._transmission = 0;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tget clearcoat() {\n\t\t\treturn this._clearcoat;\n\t\t}\n\n\t\tset clearcoat(value) {\n\t\t\tif (this._clearcoat > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._clearcoat = value;\n\t\t}\n\n\t\tget transmission() {\n\t\t\treturn this._transmission;\n\t\t}\n\n\t\tset transmission(value) {\n\t\t\tif (this._transmission > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._transmission = value;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.clearcoat = source.clearcoat;\n\t\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\t\tthis.ior = source.ior;\n\t\t\tthis.sheenTint.copy(source.sheenTint);\n\t\t\tthis.transmission = source.transmission;\n\t\t\tthis.transmissionMap = source.transmissionMap;\n\t\t\tthis.thickness = source.thickness;\n\t\t\tthis.thicknessMap = source.thicknessMap;\n\t\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\t\tthis.attenuationTint.copy(source.attenuationTint);\n\t\t\tthis.specularIntensity = source.specularIntensity;\n\t\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\t\tthis.specularTint.copy(source.specularTint);\n\t\t\tthis.specularTintMap = source.specularTintMap;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tclass Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\t\tthis.settings = null;\n\t\t\tthis.DefaultSettings_ = {};\n\t\t}\n\n\t\tevaluate(t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t}\n\n\t\tgetSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t}\n\n\t\tcopySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} // Template methods for derived classes:\n\n\n\t\tinterpolate_() {\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t}\n\n\t\tintervalChanged_() {// empty\n\t\t}\n\n\t} // ALIAS DEFINITIONS\n\n\n\tInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n\tInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tclass CubicInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\t\tthis.DefaultSettings_ = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\t\t}\n\n\t\tintervalChanged_(i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tclass LinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tclass DiscreteInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\n\t}\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tclass QuaternionLinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tclass LoadingManager {\n\t\tconstructor(onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tlet isLoading = false;\n\t\t\tlet itemsLoaded = 0;\n\t\t\tlet itemsTotal = 0;\n\t\t\tlet urlModifier = undefined;\n\t\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t\t// in the constructor\n\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\n\t\t\tthis.itemStart = function (url) {\n\t\t\t\titemsTotal++;\n\n\t\t\t\tif (isLoading === false) {\n\t\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisLoading = true;\n\t\t\t};\n\n\t\t\tthis.itemEnd = function (url) {\n\t\t\t\titemsLoaded++;\n\n\t\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\n\t\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\t\tisLoading = false;\n\n\t\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\t\tscope.onLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.itemError = function (url) {\n\t\t\t\tif (scope.onError !== undefined) {\n\t\t\t\t\tscope.onError(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.resolveURL = function (url) {\n\t\t\t\tif (urlModifier) {\n\t\t\t\t\treturn urlModifier(url);\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t};\n\n\t\t\tthis.setURLModifier = function (transform) {\n\t\t\t\turlModifier = transform;\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.addHandler = function (regex, loader) {\n\t\t\t\thandlers.push(regex, loader);\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.removeHandler = function (regex) {\n\t\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 2);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.getHandler = function (file) {\n\t\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\t\tconst regex = handlers[i];\n\t\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tclass Loader {\n\t\tconstructor(manager) {\n\t\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\t\tthis.crossOrigin = 'anonymous';\n\t\t\tthis.withCredentials = false;\n\t\t\tthis.path = '';\n\t\t\tthis.resourcePath = '';\n\t\t\tthis.requestHeader = {};\n\t\t}\n\n\t\tload() {}\n\n\t\tloadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t}\n\n\t\tparse() {}\n\n\t\tsetCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst loading = {};\n\n\tclass FileLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tconst dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tconst dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tlet request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tconst mimeType = dataUriRegexResult[1];\n\t\t\t\tconst isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tlet data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet response;\n\t\t\t\t\tconst responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tconst view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tconst response = this.response;\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (const header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t}\n\n\t\tsetResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass CompressedTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass DataTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass TextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tconst isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tdispose() {// Empty here in base class; some subclasses override.\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.blurSamples = 8;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.map) {\n\t\t\t\tthis.map.dispose();\n\t\t\t}\n\n\t\t\tif (this.mapPass) {\n\t\t\t\tthis.mapPass.dispose();\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tget power() {\n\t\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\t\treturn this.intensity * this.width * this.height * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\t\tthis.intensity = power / (this.width * this.height * Math.PI);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheenTint !== undefined) material.sheenTint = new Color().setHex(json.sheenTint);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n\t\t\tif (json.specularTint !== undefined && material.specularTint !== undefined) material.specularTint.setHex(json.specularTint);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.thickness !== undefined) material.thickness = json.thickness;\n\t\t\tif (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n\t\t\tif (json.attenuationTint !== undefined && material.attenuationTint !== undefined) material.attenuationTint.setHex(json.attenuationTint);\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.format !== undefined) material.format = json.format;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n\t\t\tif (json.specularTintMap !== undefined) material.specularTintMap = getTexture(json.specularTintMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\tif (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass LoaderUtils {\n\t\tstatic decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\n\t\tstatic extractUrlBase(url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\n\t}\n\n\tclass InstancedBufferGeometry extends BufferGeometry {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.instanceCount = Infinity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tasync loadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tconst text = await loader.loadAsync(url, onProgress);\n\t\t\tconst json = JSON.parse(text);\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\tthrow new Error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t}\n\n\t\t\treturn await scope.parseAsync(json);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, textures, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tasync parseAsync(json) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = await this.parseImagesAsync(json.images);\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, textures, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons);\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (data.type in Geometries) {\n\t\t\t\t\t\t\t\tgeometry = Geometries[data.type].fromJSON(data, shapes);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tasync parseImagesAsync(json) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tasync function deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn await loader.loadAsync(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tloader = new ImageLoader(this.manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = await deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, textures, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tfunction getTexture(uuid) {\n\t\t\t\tif (textures[uuid] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined texture', uuid);\n\t\t\t\t}\n\n\t\t\t\treturn textures[uuid];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobject.background = getTexture(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.environment !== undefined) {\n\t\t\t\t\t\tobject.environment = getTexture(data.environment);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, textures, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tclass ImageBitmapLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\n\t\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t\t}\n\n\t\t\tif (typeof fetch === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t\t}\n\n\t\t\tthis.options = {\n\t\t\t\tpremultiplyAlpha: 'none'\n\t\t\t};\n\t\t}\n\n\t\tsetOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\n\t}\n\n\tImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tclass Font {\n\t\tconstructor(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tgenerateShapes(text, size = 100) {\n\t\t\tconst shapes = [];\n\t\t\tconst paths = createPaths(text, size, this.data);\n\n\t\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tfunction createPaths(text, size, data) {\n\t\tconst chars = Array.from(text);\n\t\tconst scale = size / data.resolution;\n\t\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tconst paths = [];\n\t\tlet offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (let i = 0; i < chars.length; i++) {\n\t\t\tconst char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst path = new ShapePath();\n\t\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (let i = 0, l = outline.length; i < l;) {\n\t\t\t\tconst action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tclass FontLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tconst font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\n\t}\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = /*@__PURE__*/new Matrix4();\n\n\tconst _eyeLeft = /*@__PURE__*/new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart = true) {\n\t\t\tthis.autoStart = autoStart;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tclass Composite {\n\t\tconstructor(targetGroup, path, optionalParsedPath) {\n\t\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t\t}\n\n\t\tgetValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t}\n\n\t\tsetValue(array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t}\n\n\t\tbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t}\n\n\t\tunbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\n\t} // Note: This class uses a State pattern on a per-method basis:\n\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t// prototype version of these methods with one that represents\n\t// the bound state. When the property is not found, the methods\n\t// become no-ops.\n\n\n\tclass PropertyBinding {\n\t\tconstructor(rootNode, path, parsedPath) {\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\t\tthis.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t\tstatic create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tstatic sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t}\n\n\t\tstatic parseTrackName(trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\n\t\tstatic findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // these are used to \"bind\" a nonexistent property\n\n\n\t\t_getValue_unavailable() {}\n\n\t\t_setValue_unavailable() {} // Getters\n\n\n\t\t_getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.targetObject[this.propertyName];\n\t\t}\n\n\t\t_getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}\n\n\t\t_getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}\n\n\t\t_getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t} // Direct\n\n\n\t\t_setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}\n\n\t\t_setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // EntireArray\n\n\n\t\t_setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}\n\n\t\t_setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // ArrayElement\n\n\n\t\t_setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}\n\n\t\t_setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // HasToFromArray\n\n\n\t\t_setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}\n\n\t\t_setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\t_getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset);\n\t\t}\n\n\t\t_setValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t} // create getter / setter pair for a property in the scene graph\n\n\n\t\tbind() {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t}\n\n\t\tunbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t}\n\n\tPropertyBinding.Composite = Composite;\n\tPropertyBinding.prototype.BindingType = {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t};\n\tPropertyBinding.prototype.Versioning = {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t};\n\tPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n\tPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n\tPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n\tPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n\tPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n\tPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\t\tconstructor(array, stride, meshPerAttribute = 1) {\n\t\t\tsuper(array, stride);\n\t\t\tthis.meshPerAttribute = meshPerAttribute;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tconst ib = super.clone(data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tconst json = super.toJSON(data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tclass GLBufferAttribute {\n\t\tconstructor(buffer, type, itemSize, elementSize, count) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.type = type;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.elementSize = elementSize;\n\t\t\tthis.count = count;\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n\tclass Raycaster {\n\t\tconstructor(origin, direction, near = 0, far = Infinity) {\n\t\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.camera = null;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t}\n\n\t\tsetFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t}\n\n\t\tintersectObject(object, recursive = false, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t\tintersectObjects(objects, recursive = false, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass ImmediateRenderObject extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.material = material;\n\n\t\t\tthis.render = function () {};\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasColors = false;\n\t\t\tthis.hasUvs = false;\n\t\t\tthis.positionArray = null;\n\t\t\tthis.normalArray = null;\n\t\t\tthis.colorArray = null;\n\t\t\tthis.uvArray = null;\n\t\t\tthis.count = 0;\n\t\t}\n\n\t}\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t\tsetColors(xAxisColor, yAxisColor, zAxisColor) {\n\t\t\tconst color = new Color();\n\t\t\tconst array = this.geometry.attributes.color.array;\n\t\t\tcolor.set(xAxisColor);\n\t\t\tcolor.toArray(array, 0);\n\t\t\tcolor.toArray(array, 3);\n\t\t\tcolor.set(yAxisColor);\n\t\t\tcolor.toArray(array, 6);\n\t\t\tcolor.toArray(array, 9);\n\t\t\tcolor.set(zAxisColor);\n\t\t\tcolor.toArray(array, 12);\n\t\t\tcolor.toArray(array, 15);\n\t\t\tthis.geometry.attributes.color.needsUpdate = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tclass DataUtils {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\tstatic toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function () {\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function () {\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function () {\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function () {\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function () {\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function () {\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t}; //\n\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function () {\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function () {\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function () {\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t},\n\t\tvertexTangents: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .vertexTangents has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .vertexTangents has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function () {\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function () {\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function () {\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}